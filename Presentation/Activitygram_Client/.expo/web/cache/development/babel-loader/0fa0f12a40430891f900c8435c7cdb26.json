{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { BigListItemType } from \"./BigListItem\";\n\nvar BigListItemRecycler = function () {\n  function BigListItemRecycler(items) {\n    var _this = this;\n\n    _classCallCheck(this, BigListItemRecycler);\n\n    this.items = {};\n    this.pendingItems = {};\n    items.forEach(function (item) {\n      var type = item.type,\n          section = item.section,\n          index = item.index;\n\n      var _this$itemsForType = _this.itemsForType(type),\n          _this$itemsForType2 = _slicedToArray(_this$itemsForType, 1),\n          itemsForType = _this$itemsForType2[0];\n\n      itemsForType[type + \":\" + section + \":\" + index] = item;\n    });\n  }\n\n  _createClass(BigListItemRecycler, [{\n    key: \"itemsForType\",\n    value: function itemsForType(type) {\n      return [this.items[type] || (this.items[type] = {}), this.pendingItems[type] || (this.pendingItems[type] = [])];\n    }\n  }, {\n    key: \"get\",\n    value: function get(_ref) {\n      var type = _ref.type,\n          position = _ref.position,\n          height = _ref.height,\n          _ref$section = _ref.section,\n          section = _ref$section === void 0 ? 0 : _ref$section,\n          _ref$index = _ref.index,\n          index = _ref$index === void 0 ? 0 : _ref$index;\n\n      var _this$itemsForType3 = this.itemsForType(type),\n          _this$itemsForType4 = _slicedToArray(_this$itemsForType3, 2),\n          items = _this$itemsForType4[0],\n          pendingItems = _this$itemsForType4[1];\n\n      var itemKey = type + \":\" + section + \":\" + index;\n      var item = items[itemKey];\n\n      if (item == null) {\n        item = {\n          type: type,\n          key: -1,\n          position: position,\n          height: height,\n          section: section,\n          index: index\n        };\n        pendingItems.push(item);\n      } else {\n        item.position = position;\n        item.height = height;\n        delete items[itemKey];\n      }\n\n      return item;\n    }\n  }, {\n    key: \"fill\",\n    value: function fill() {\n      var _this2 = this;\n\n      Object.values(BigListItemType).forEach(function (type) {\n        var _this2$itemsForType = _this2.itemsForType(type),\n            _this2$itemsForType2 = _slicedToArray(_this2$itemsForType, 2),\n            items = _this2$itemsForType2[0],\n            pendingItems = _this2$itemsForType2[1];\n\n        var index = 0;\n        Object.values(items).forEach(function (_ref2) {\n          var key = _ref2.key;\n          var item = pendingItems[index];\n\n          if (item == null) {\n            return false;\n          }\n\n          item.key = key;\n          index++;\n        });\n\n        for (; index < pendingItems.length; index++) {\n          pendingItems[index].key = ++BigListItemRecycler.lastKey;\n        }\n\n        pendingItems.length = 0;\n      });\n    }\n  }]);\n\n  return BigListItemRecycler;\n}();\n\n_defineProperty(BigListItemRecycler, \"lastKey\", 0);\n\nexport default BigListItemRecycler;","map":{"version":3,"sources":["BigListItemRecycler.js"],"names":["BigListItemType","BigListItemRecycler","constructor","items","type","index","itemsForType","itemKey","section","item","key","position","fill","Object","forEach","values","pendingItems"],"mappings":"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","sourcesContent":["import { BigListItemType } from \"./BigListItem\";\n\nclass BigListItemRecycler {\n  static lastKey = 0;\n  /**\n   * Constructor.\n   * @param {object[]} items\n   */\n  constructor(items) {\n    this.items = {};\n    this.pendingItems = {};\n    items.forEach((item) => {\n      const { type, section, index } = item;\n      const [itemsForType] = this.itemsForType(type);\n      itemsForType[`${type}:${section}:${index}`] = item;\n    });\n  }\n\n  /**\n   * Items for type.\n   * @param {any} type\n   * @returns {(*|{}|*[])[]}\n   */\n  itemsForType(type) {\n    return [\n      this.items[type] || (this.items[type] = {}),\n      this.pendingItems[type] || (this.pendingItems[type] = []),\n    ];\n  }\n\n  /**\n   * Get item.\n   * @param {any} type\n   * @param {number} position\n   * @param {number} height\n   * @param {int} section\n   * @param {int} index\n   * @returns {{section: int, position: number, index: number, type: any, key: number, height: int}}\n   */\n  get({ type, position, height, section = 0, index = 0 }) {\n    const [items, pendingItems] = this.itemsForType(type);\n    const itemKey = `${type}:${section}:${index}`;\n    let item = items[itemKey];\n    if (item == null) {\n      item = { type, key: -1, position, height, section, index };\n      pendingItems.push(item);\n    } else {\n      item.position = position;\n      item.height = height;\n      delete items[itemKey];\n    }\n    return item;\n  }\n\n  /**\n   * Fill.\n   */\n  fill() {\n    Object.values(BigListItemType).forEach((type) => {\n      const [items, pendingItems] = this.itemsForType(type);\n      let index = 0;\n      Object.values(items).forEach(({ key }) => {\n        const item = pendingItems[index];\n        if (item == null) {\n          return false;\n        }\n        item.key = key;\n        index++;\n      });\n\n      for (; index < pendingItems.length; index++) {\n        pendingItems[index].key = ++BigListItemRecycler.lastKey;\n      }\n      pendingItems.length = 0;\n    });\n  }\n}\nexport default BigListItemRecycler;\n"]},"metadata":{},"sourceType":"module"}