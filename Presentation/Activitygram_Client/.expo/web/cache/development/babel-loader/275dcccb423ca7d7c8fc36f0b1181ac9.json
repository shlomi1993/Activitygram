{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"id\", \"children\", \"style\", \"onRequestClose\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport RNModal from \"react-native-web/dist/exports/Modal\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useTheme } from \"../hooks/\";\nimport Block from \"./Block\";\nimport Button from \"./Button\";\nimport Image from \"./Image\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Modal = function Modal(_ref) {\n  var _ref$id = _ref.id,\n      id = _ref$id === void 0 ? 'Modal' : _ref$id,\n      children = _ref.children,\n      style = _ref.style,\n      onRequestClose = _ref.onRequestClose,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useTheme = useTheme(),\n      assets = _useTheme.assets,\n      colors = _useTheme.colors,\n      sizes = _useTheme.sizes;\n\n  var modalStyles = StyleSheet.flatten([style, {\n    position: 'absolute',\n    top: '50%',\n    bottom: '50%'\n  }]);\n  var modalID = Platform.OS === 'android' ? {\n    accessibilityLabel: id\n  } : {\n    testID: id\n  };\n  return _jsx(RNModal, _objectSpread(_objectSpread(_objectSpread({}, modalID), props), {}, {\n    transparent: true,\n    style: modalStyles,\n    animationType: \"slide\",\n    onRequestClose: onRequestClose,\n    children: _jsx(Block, {\n      justify: \"flex-end\",\n      children: _jsxs(Block, {\n        safe: true,\n        card: true,\n        flex: 2,\n        color: \"rgba(0,0,0,0.8)\",\n        bottom: '40%',\n        right: '2%',\n        left: '2%',\n        position: \"absolute\",\n        children: [_jsx(Button, {\n          top: 0,\n          right: 0,\n          position: \"absolute\",\n          onPress: function onPress() {\n            return onRequestClose == null ? void 0 : onRequestClose();\n          },\n          children: _jsx(Image, {\n            source: assets.close,\n            color: colors.white\n          })\n        }), _jsx(Block, {\n          flex: 0,\n          marginTop: sizes.xxl,\n          paddingHorizontal: sizes.padding,\n          children: children\n        })]\n      })\n    })\n  }));\n};\n\nexport default React.memo(Modal);","map":{"version":3,"sources":["C:/Users/shirz/Documents/GitHub/Activitygram/Presentation/Activitygram_Client/src/components/Modal.tsx"],"names":["React","useTheme","Block","Button","Image","Modal","id","children","style","onRequestClose","props","assets","colors","sizes","modalStyles","StyleSheet","flatten","position","top","bottom","modalID","Platform","OS","accessibilityLabel","testID","close","white","xxl","padding","memo"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAGA,SAAQC,QAAR;AAGA,OAAOC,KAAP;AACA,OAAOC,MAAP;AACA,OAAOC,KAAP;;;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAMK;AAAA,qBALjBC,EAKiB;AAAA,MALjBA,EAKiB,wBALZ,OAKY;AAAA,MAJjBC,QAIiB,QAJjBA,QAIiB;AAAA,MAHjBC,KAGiB,QAHjBA,KAGiB;AAAA,MAFjBC,cAEiB,QAFjBA,cAEiB;AAAA,MADdC,KACc;;AACjB,kBAAgCT,QAAQ,EAAxC;AAAA,MAAOU,MAAP,aAAOA,MAAP;AAAA,MAAeC,MAAf,aAAeA,MAAf;AAAA,MAAuBC,KAAvB,aAAuBA,KAAvB;;AACA,MAAMC,WAAW,GAAGC,UAAU,CAACC,OAAX,CAAmB,CAACR,KAAD,EAAQ;AAACS,IAAAA,QAAQ,EAAE,UAAX;AAAuBC,IAAAA,GAAG,EAAE,KAA5B;AAAmCC,IAAAA,MAAM,EAAC;AAA1C,GAAR,CAAnB,CAApB;AAGA,MAAMC,OAAO,GACXC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4B;AAACC,IAAAA,kBAAkB,EAAEjB;AAArB,GAA5B,GAAuD;AAACkB,IAAAA,MAAM,EAAElB;AAAT,GADzD;AAGA,SACE,KAAC,OAAD,gDACMc,OADN,GAEMV,KAFN;AAGE,IAAA,WAAW,MAHb;AAIE,IAAA,KAAK,EAAEI,WAJT;AAKE,IAAA,aAAa,EAAC,OALhB;AAME,IAAA,cAAc,EAAEL,cANlB;AAAA,cAOE,KAAC,KAAD;AAAO,MAAA,OAAO,EAAC,UAAf;AAAA,gBACE,MAAC,KAAD;AAAO,QAAA,IAAI,MAAX;AAAY,QAAA,IAAI,MAAhB;AAAiB,QAAA,IAAI,EAAE,CAAvB;AAA0B,QAAA,KAAK,EAAC,iBAAhC;AAAkD,QAAA,MAAM,EAAE,KAA1D;AAAiE,QAAA,KAAK,EAAE,IAAxE;AAA8E,QAAA,IAAI,EAAE,IAApF;AAA0F,QAAA,QAAQ,EAAC,UAAnG;AAAA,mBACE,KAAC,MAAD;AACE,UAAA,GAAG,EAAE,CADP;AAEE,UAAA,KAAK,EAAE,CAFT;AAGE,UAAA,QAAQ,EAAC,UAHX;AAIE,UAAA,OAAO,EAAE;AAAA,mBAAMA,cAAN,oBAAMA,cAAc,EAApB;AAAA,WAJX;AAAA,oBAKE,KAAC,KAAD;AAAO,YAAA,MAAM,EAAEE,MAAM,CAACc,KAAtB;AAA6B,YAAA,KAAK,EAAEb,MAAM,CAACc;AAA3C;AALF,UADF,EAQE,KAAC,KAAD;AACE,UAAA,IAAI,EAAE,CADR;AAEE,UAAA,SAAS,EAAEb,KAAK,CAACc,GAFnB;AAGE,UAAA,iBAAiB,EAAEd,KAAK,CAACe,OAH3B;AAAA,oBAIGrB;AAJH,UARF;AAAA;AADF;AAPF,KADF;AA2BD,CAzCD;;AA2CA,eAAeP,KAAK,CAAC6B,IAAN,CAAWxB,KAAX,CAAf","sourcesContent":["import React from 'react';\r\nimport {StyleSheet, Modal as RNModal, ViewStyle, Platform} from 'react-native';\r\n\r\nimport {useTheme} from '../hooks/';\r\nimport {IModalProps} from '../constants/types';\r\n\r\nimport Block from './Block';\r\nimport Button from './Button';\r\nimport Image from './Image';\r\n\r\nconst Modal = ({\r\n  id = 'Modal',\r\n  children,\r\n  style,\r\n  onRequestClose,\r\n  ...props\r\n}: IModalProps) => {\r\n  const {assets, colors, sizes} = useTheme();\r\n  const modalStyles = StyleSheet.flatten([style, {position: 'absolute', top: '50%', bottom:'50%'}]) as ViewStyle;\r\n\r\n  // generate component testID or accessibilityLabel based on Platform.OS\r\n  const modalID =\r\n    Platform.OS === 'android' ? {accessibilityLabel: id} : {testID: id};\r\n\r\n  return (\r\n    <RNModal\r\n      {...modalID}\r\n      {...props}\r\n      transparent\r\n      style={modalStyles}\r\n      animationType=\"slide\"\r\n      onRequestClose={onRequestClose}>\r\n      <Block justify=\"flex-end\">\r\n        <Block safe card flex={2} color=\"rgba(0,0,0,0.8)\" bottom={'40%'} right={'2%'} left={'2%'} position=\"absolute\">\r\n          <Button\r\n            top={0}\r\n            right={0}\r\n            position=\"absolute\"\r\n            onPress={() => onRequestClose?.()}>\r\n            <Image source={assets.close} color={colors.white} />\r\n          </Button>\r\n          <Block\r\n            flex={0}\r\n            marginTop={sizes.xxl}\r\n            paddingHorizontal={sizes.padding}>\r\n            {children}\r\n          </Block>\r\n        </Block>\r\n      </Block>\r\n    </RNModal>\r\n  );\r\n};\r\n\r\nexport default React.memo(Modal);"]},"metadata":{},"sourceType":"module"}