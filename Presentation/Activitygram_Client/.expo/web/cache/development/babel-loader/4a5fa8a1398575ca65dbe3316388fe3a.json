{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useLogger } from \"../contexts\";\nimport { usePanResponder, useSlideAnimation, useViewDimensions } from \"../hooks\";\nimport { noop } from \"../utils/func\";\nimport { bound } from \"../utils/number\";\nimport { getTestId } from \"../utils/test-id\";\nimport { styles } from \"./AnimatedContainer.styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function dampingFor(gesture, position) {\n  var moveY = gesture.moveY;\n\n  switch (position) {\n    case 'bottom':\n      {\n        var _Dimensions$get = Dimensions.get('screen'),\n            screenHeight = _Dimensions$get.height;\n\n        return Math.abs(screenHeight - moveY);\n      }\n\n    case 'top':\n      return Math.abs(moveY);\n\n    default:\n      throw new Error(\"Toast position: \" + position + \" not implemented\");\n  }\n}\nexport function animatedValueFor(gesture, position, damping) {\n  var boundValue = function boundValue(val) {\n    return bound(val, 0, 2);\n  };\n\n  var dy = gesture.dy;\n\n  switch (position) {\n    case 'bottom':\n      return boundValue(1 - dy / damping);\n\n    case 'top':\n      return boundValue(1 + dy / damping);\n\n    default:\n      throw new Error(\"Toast position: \" + position + \" not implemented\");\n  }\n}\nexport function AnimatedContainer(_ref) {\n  var children = _ref.children,\n      isVisible = _ref.isVisible,\n      position = _ref.position,\n      topOffset = _ref.topOffset,\n      bottomOffset = _ref.bottomOffset,\n      keyboardOffset = _ref.keyboardOffset,\n      onHide = _ref.onHide,\n      _ref$onRestorePositio = _ref.onRestorePosition,\n      onRestorePosition = _ref$onRestorePositio === void 0 ? noop : _ref$onRestorePositio;\n\n  var _useLogger = useLogger(),\n      log = _useLogger.log;\n\n  var _useViewDimensions = useViewDimensions(),\n      computeViewDimensions = _useViewDimensions.computeViewDimensions,\n      height = _useViewDimensions.height;\n\n  var _useSlideAnimation = useSlideAnimation({\n    position: position,\n    height: height,\n    topOffset: topOffset,\n    bottomOffset: bottomOffset,\n    keyboardOffset: keyboardOffset\n  }),\n      animatedValue = _useSlideAnimation.animatedValue,\n      animate = _useSlideAnimation.animate,\n      animationStyles = _useSlideAnimation.animationStyles;\n\n  var onDismiss = React.useCallback(function () {\n    log('Swipe, dismissing');\n    animate(0);\n    onHide();\n  }, [animate, log, onHide]);\n  var onRestore = React.useCallback(function () {\n    log('Swipe, restoring to original position');\n    animate(1);\n    onRestorePosition();\n  }, [animate, log, onRestorePosition]);\n  var computeNewAnimatedValueForGesture = React.useCallback(function (gesture) {\n    var damping = dampingFor(gesture, position);\n    var newAnimatedValue = animatedValueFor(gesture, position, damping);\n    return newAnimatedValue;\n  }, [position]);\n\n  var _usePanResponder = usePanResponder({\n    animatedValue: animatedValue,\n    computeNewAnimatedValueForGesture: computeNewAnimatedValueForGesture,\n    onDismiss: onDismiss,\n    onRestore: onRestore\n  }),\n      panResponder = _usePanResponder.panResponder;\n\n  React.useLayoutEffect(function () {\n    var newAnimationValue = isVisible ? 1 : 0;\n    animate(newAnimationValue);\n  }, [animate, isVisible]);\n  return _jsx(Animated.View, _objectSpread(_objectSpread({\n    testID: getTestId('AnimatedContainer'),\n    onLayout: computeViewDimensions,\n    style: [styles.base, styles[position], animationStyles],\n    pointerEvents: \"box-none\"\n  }, panResponder.panHandlers), {}, {\n    children: children\n  }));\n}","map":{"version":3,"sources":["C:/Users/shirz/Documents/GitHub/Activitygram/Presentation/Activitygram_Client/node_modules/react-native-toast-message/lib/src/components/AnimatedContainer.js"],"names":["React","useLogger","usePanResponder","useSlideAnimation","useViewDimensions","noop","bound","getTestId","styles","dampingFor","gesture","position","moveY","Dimensions","get","screenHeight","height","Math","abs","Error","animatedValueFor","damping","boundValue","val","dy","AnimatedContainer","children","isVisible","topOffset","bottomOffset","keyboardOffset","onHide","onRestorePosition","log","computeViewDimensions","animatedValue","animate","animationStyles","onDismiss","useCallback","onRestore","computeNewAnimatedValueForGesture","newAnimatedValue","panResponder","useLayoutEffect","newAnimationValue","base","panHandlers"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Animated, Dimensions } from 'react-native';\nimport { useLogger } from '../contexts';\nimport { usePanResponder, useSlideAnimation, useViewDimensions } from '../hooks';\nimport { noop } from '../utils/func';\nimport { bound } from '../utils/number';\nimport { getTestId } from '../utils/test-id';\nimport { styles } from './AnimatedContainer.styles';\n/**\n * Produces a positive damping value.\n *\n * To note: `moveY` becomes negative when going off-screen. By making sure the value\n * produced is always positive, we avoid issues like: https://github.com/calintamas/react-native-toast-message/issues/280\n */\nexport function dampingFor(gesture, position) {\n    const { moveY } = gesture;\n    switch (position) {\n        case 'bottom': {\n            const { height: screenHeight } = Dimensions.get('screen');\n            return Math.abs(screenHeight - moveY);\n        }\n        case 'top':\n            return Math.abs(moveY);\n        default:\n            throw new Error(`Toast position: ${position} not implemented`);\n    }\n}\nexport function animatedValueFor(gesture, position, damping) {\n    const boundValue = (val) => bound(val, 0, 2);\n    const { dy } = gesture;\n    switch (position) {\n        case 'bottom':\n            return boundValue(1 - dy / damping);\n        case 'top':\n            return boundValue(1 + dy / damping);\n        default:\n            throw new Error(`Toast position: ${position} not implemented`);\n    }\n}\nexport function AnimatedContainer({ children, isVisible, position, topOffset, bottomOffset, keyboardOffset, onHide, onRestorePosition = noop }) {\n    const { log } = useLogger();\n    const { computeViewDimensions, height } = useViewDimensions();\n    const { animatedValue, animate, animationStyles } = useSlideAnimation({\n        position,\n        height,\n        topOffset,\n        bottomOffset,\n        keyboardOffset\n    });\n    const onDismiss = React.useCallback(() => {\n        log('Swipe, dismissing');\n        animate(0);\n        onHide();\n    }, [animate, log, onHide]);\n    const onRestore = React.useCallback(() => {\n        log('Swipe, restoring to original position');\n        animate(1);\n        onRestorePosition();\n    }, [animate, log, onRestorePosition]);\n    const computeNewAnimatedValueForGesture = React.useCallback((gesture) => {\n        const damping = dampingFor(gesture, position);\n        const newAnimatedValue = animatedValueFor(gesture, position, damping);\n        return newAnimatedValue;\n    }, [position]);\n    const { panResponder } = usePanResponder({\n        animatedValue,\n        computeNewAnimatedValueForGesture,\n        onDismiss,\n        onRestore\n    });\n    React.useLayoutEffect(() => {\n        const newAnimationValue = isVisible ? 1 : 0;\n        animate(newAnimationValue);\n    }, [animate, isVisible]);\n    return (<Animated.View testID={getTestId('AnimatedContainer')} onLayout={computeViewDimensions} style={[styles.base, styles[position], animationStyles]} \n    // This container View is never the target of touch events but its subviews can be.\n    // By doing this, tapping buttons behind the Toast is allowed\n    pointerEvents='box-none' {...panResponder.panHandlers}>\n      {children}\n    </Animated.View>);\n}\n"]},"metadata":{},"sourceType":"module"}