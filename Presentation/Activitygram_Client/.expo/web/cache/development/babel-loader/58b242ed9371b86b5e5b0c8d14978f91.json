{"ast":null,"code":"import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { mergeViewStyle } from \"./utils\";\n\nvar BigListSection = function BigListSection(_ref) {\n  var style = _ref.style,\n      position = _ref.position,\n      height = _ref.height,\n      nextSectionPosition = _ref.nextSectionPosition,\n      scrollTopValue = _ref.scrollTopValue,\n      children = _ref.children;\n  var inputRange = [-1, 0];\n  var outputRange = [0, 0];\n  inputRange.push(position);\n  outputRange.push(0);\n  var collisionPoint = (nextSectionPosition || 0) - height;\n\n  if (collisionPoint >= position) {\n    inputRange.push(collisionPoint, collisionPoint + 1);\n    outputRange.push(collisionPoint - position, collisionPoint - position);\n  } else {\n    inputRange.push(position + 1);\n    outputRange.push(1);\n  }\n\n  var translateY = scrollTopValue.interpolate({\n    inputRange: inputRange,\n    outputRange: outputRange\n  });\n  var child = React.Children.only(children);\n  var fillChildren = React.isValidElement(child) && React.cloneElement(child, mergeViewStyle(style, {\n    style: {\n      flex: 1\n    }\n  }));\n  var viewStyle = [React.isValidElement(child) && child.props.style ? child.props.style : style, {\n    elevation: 10,\n    zIndex: 10,\n    height: height,\n    width: \"100%\",\n    transform: [{\n      translateY: translateY\n    }]\n  }];\n  return React.createElement(Animated.View, {\n    style: viewStyle\n  }, fillChildren);\n};\n\nBigListSection.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  height: PropTypes.number,\n  nextSectionPosition: PropTypes.number,\n  position: PropTypes.number,\n  scrollTopValue: PropTypes.instanceOf(Animated.Value),\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array])\n};\nexport default memo(BigListSection);","map":{"version":3,"sources":["BigListSection.jsx"],"names":["children","inputRange","outputRange","push","collisionPoint","translateY","child","fillChildren","flex","viewStyle","width","BigListSection","style","PropTypes","oneOfType"],"mappings":"AAAA,OAAA,KAAA,IAAA,IAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;;AAGA,SAAA,cAAA;;mDAmBEA;AAAAA,MANF,KAMEA,QANF,KAMEA;AAAAA,MANsB,QAMtBA,QANsB,QAMtBA;AAAAA,MANsB,MAMtBA,QANsB,MAMtBA;AAAAA,MANsB,mBAMtBA,QANsB,mBAMtBA;AAAAA,MANsB,cAMtBA,QANsB,cAMtBA;AAAAA,MANsB,QAMtBA,QANsB,QAMtBA;AANqB,MAOjB,UAAA,GAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAPiB;AAQrB,MAAMC,WAAU,GAAI,CAAD,CAAC,EAApB,CAAoB,CAApB;AACA,EAAA,UAAMC,CAAAA,IAAN,CAAA,QAAA;AACAD,EAAAA,WAAWE,CAAXF,IAAAA,CAAAA,CAAAA;AACAC,MAAAA,cAAAA,GAAAA,CAAAA,mBAAAA,IAAAA,CAAAA,IAAAA,MAAAA;;;AAEA,IAAA,UAAIE,CAAAA,IAAJ,CAAA,cAAA,EAAgC,cAAA,GAAA,CAAhC;AACEH,IAAAA,WAAWE,CAAXF,IAAAA,CAAAA,cAAAA,GAAgCG,QAAhCH,EAAAA,cAAAA,GAAAA,QAAAA;AACAC,G,MAAAA;AAFF,IAAA,UAGO,CAAA,IAHP,CAGO,QAAA,GAAA,CAHP;AAIED,IAAAA,WAAWE,CAAXF,IAAAA,CAAAA,CAAAA;AACAC;;;AAEF,IAAA,UAAMG,EAAN,U;AAA8C,IAAA,WAAA,EAAA;;AAA9C,MAAA,KAAA,GAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,QAAA,CAAA;AAIA,MAAMC,YAAN,GACMC,KACJ,CAAA,cADIA,CACJ,KADIA,KAKO,KAAA,CAAA,YAAA,CAAEC,KAAF,EAAA,cAAA,CAAA,KAAA,EAAA;AALb,IAAA,KAAA,EAAA;AAQMC,MAAAA,IAAAA,EAAAA;AARN;AAKa,GAAA,CAAA,CANb;AAiBIC,MAAAA,SAJF,GAAA,CAKc,KAAA,CAAA,cAAA,CAAA,KAAA,KAAA,KAAA,CAAA,KAAA,CAAA,KAAA,GAAEL,KAAAA,CAAAA,KAAAA,CAAAA,KAAF,GAAD,KALb,EAJF;AAYA,IAAA,SAAA,EAAA,EAZA;AAYsB,IAAA,MAAOI,EAAAA,EAZ7B;AAYyCF,IAAAA,MAAAA,EAAzC,MAZA;AAjCF,IAAA,KAAA,EAAA,MAiCE;gBAeFI;AACU,MAAA,UADiB,EACjB;AADVA,K;AAfE,GAIE,CAIED;AAgBJE,SAAiBE,KAAVD,CAAAA,aAAUC,CATnBH,QAAAA,CAAAA,IASmBG,EAGnB;;AAAA,GAHmBA,E,YAAAA,CAAjBF","sourcesContent":["import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Animated } from \"react-native\";\n\nimport { mergeViewStyle } from \"./utils\";\n\n/**\n * List section.\n * @param {object|array} style\n * @param {number} position\n * @param {number} height\n * @param {number} nextSectionPosition\n * @param {Animated.Value} scrollTopValue\n * @param {React.node} children\n * @returns {JSX.Element}\n * @constructor\n */\nconst BigListSection = ({\n  style,\n  position,\n  height,\n  nextSectionPosition,\n  scrollTopValue,\n  children,\n}) => {\n  const inputRange = [-1, 0];\n  const outputRange = [0, 0];\n  inputRange.push(position);\n  outputRange.push(0);\n  const collisionPoint = (nextSectionPosition || 0) - height;\n  if (collisionPoint >= position) {\n    inputRange.push(collisionPoint, collisionPoint + 1);\n    outputRange.push(collisionPoint - position, collisionPoint - position);\n  } else {\n    inputRange.push(position + 1);\n    outputRange.push(1);\n  }\n  const translateY = scrollTopValue.interpolate({\n    inputRange,\n    outputRange,\n  });\n  const child = React.Children.only(children);\n  const fillChildren =\n    React.isValidElement(child) &&\n    React.cloneElement(\n      child,\n      mergeViewStyle(style, {\n        style: { flex: 1 },\n      }),\n    );\n  const viewStyle = [\n    React.isValidElement(child) && child.props.style\n      ? child.props.style\n      : style,\n    {\n      elevation: 10,\n      zIndex: 10,\n      height: height,\n      width: \"100%\",\n      transform: [{ translateY }],\n    },\n  ];\n  return <Animated.View style={viewStyle}>{fillChildren}</Animated.View>;\n};\n\nBigListSection.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n  height: PropTypes.number,\n  nextSectionPosition: PropTypes.number,\n  position: PropTypes.number,\n  scrollTopValue: PropTypes.instanceOf(Animated.Value),\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n};\n\nexport default memo(BigListSection);\n"]},"metadata":{},"sourceType":"module"}