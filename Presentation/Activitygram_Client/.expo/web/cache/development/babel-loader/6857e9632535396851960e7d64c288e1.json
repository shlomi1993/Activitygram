{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useEffect } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { useFonts } from 'expo-font';\nimport AppLoading from 'expo-app-loading';\nimport { NavigationContainer, DefaultTheme } from '@react-navigation/native';\nimport Menu from \"./Menu\";\nimport { useData, ThemeProvider, TranslationProvider } from \"../hooks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (function () {\n  var _useData = useData(),\n      isDark = _useData.isDark,\n      theme = _useData.theme,\n      setTheme = _useData.setTheme;\n\n  useEffect(function () {\n    Platform.OS === 'android' && StatusBar.setTranslucent(true);\n    StatusBar.setBarStyle(isDark ? 'light-content' : 'dark-content');\n    return function () {\n      StatusBar.setBarStyle('default');\n    };\n  }, [isDark]);\n\n  var _useFonts = useFonts({\n    'OpenSans-Light': theme.assets.OpenSansLight,\n    'OpenSans-Regular': theme.assets.OpenSansRegular,\n    'OpenSans-SemiBold': theme.assets.OpenSansSemiBold,\n    'OpenSans-ExtraBold': theme.assets.OpenSansExtraBold,\n    'OpenSans-Bold': theme.assets.OpenSansBold\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  if (!fontsLoaded) {\n    return _jsx(AppLoading, {});\n  }\n\n  var navigationTheme = _objectSpread(_objectSpread({}, DefaultTheme), {}, {\n    dark: isDark,\n    colors: _objectSpread(_objectSpread({}, DefaultTheme.colors), {}, {\n      border: 'rgba(0,0,0,0)',\n      text: String(theme.colors.text),\n      card: String(theme.colors.card),\n      primary: String(theme.colors.primary),\n      notification: String(theme.colors.primary),\n      background: String(theme.colors.background)\n    })\n  });\n\n  return _jsx(TranslationProvider, {\n    children: _jsx(ThemeProvider, {\n      theme: theme,\n      setTheme: setTheme,\n      children: _jsx(NavigationContainer, {\n        theme: navigationTheme,\n        children: _jsx(Menu, {})\n      })\n    })\n  });\n});","map":{"version":3,"sources":["C:/Users/shirz/Documents/GitHub/Activitygram/Presentation/Activitygram_Client/src/navigation/App.tsx"],"names":["React","useEffect","useFonts","AppLoading","NavigationContainer","DefaultTheme","Menu","useData","ThemeProvider","TranslationProvider","isDark","theme","setTheme","Platform","OS","StatusBar","setTranslucent","setBarStyle","assets","OpenSansLight","OpenSansRegular","OpenSansSemiBold","OpenSansExtraBold","OpenSansBold","fontsLoaded","navigationTheme","dark","colors","border","text","String","card","primary","notification","background"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;AAEA,SAAQC,QAAR,QAAuB,WAAvB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAAQC,mBAAR,EAA6BC,YAA7B,QAAgD,0BAAhD;AAEA,OAAOC,IAAP;AACA,SAAQC,OAAR,EAAiBC,aAAjB,EAAgCC,mBAAhC;;AAEA,gBAAe,YAAM;AACnB,iBAAkCF,OAAO,EAAzC;AAAA,MAAOG,MAAP,YAAOA,MAAP;AAAA,MAAeC,KAAf,YAAeA,KAAf;AAAA,MAAsBC,QAAtB,YAAsBA,QAAtB;;AAGAX,EAAAA,SAAS,CAAC,YAAM;AACdY,IAAAA,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6BC,SAAS,CAACC,cAAV,CAAyB,IAAzB,CAA7B;AACAD,IAAAA,SAAS,CAACE,WAAV,CAAsBP,MAAM,GAAG,eAAH,GAAqB,cAAjD;AACA,WAAO,YAAM;AACXK,MAAAA,SAAS,CAACE,WAAV,CAAsB,SAAtB;AACD,KAFD;AAGD,GANQ,EAMN,CAACP,MAAD,CANM,CAAT;;AASA,kBAAsBR,QAAQ,CAAC;AAC7B,sBAAkBS,KAAK,CAACO,MAAN,CAAaC,aADF;AAE7B,wBAAoBR,KAAK,CAACO,MAAN,CAAaE,eAFJ;AAG7B,yBAAqBT,KAAK,CAACO,MAAN,CAAaG,gBAHL;AAI7B,0BAAsBV,KAAK,CAACO,MAAN,CAAaI,iBAJN;AAK7B,qBAAiBX,KAAK,CAACO,MAAN,CAAaK;AALD,GAAD,CAA9B;AAAA;AAAA,MAAOC,WAAP;;AAQA,MAAI,CAACA,WAAL,EAAkB;AAChB,WAAO,KAAC,UAAD,KAAP;AACD;;AAED,MAAMC,eAAe,mCAChBpB,YADgB;AAEnBqB,IAAAA,IAAI,EAAEhB,MAFa;AAGnBiB,IAAAA,MAAM,kCACDtB,YAAY,CAACsB,MADZ;AAEJC,MAAAA,MAAM,EAAE,eAFJ;AAGJC,MAAAA,IAAI,EAAEC,MAAM,CAACnB,KAAK,CAACgB,MAAN,CAAaE,IAAd,CAHR;AAIJE,MAAAA,IAAI,EAAED,MAAM,CAACnB,KAAK,CAACgB,MAAN,CAAaI,IAAd,CAJR;AAKJC,MAAAA,OAAO,EAAEF,MAAM,CAACnB,KAAK,CAACgB,MAAN,CAAaK,OAAd,CALX;AAMJC,MAAAA,YAAY,EAAEH,MAAM,CAACnB,KAAK,CAACgB,MAAN,CAAaK,OAAd,CANhB;AAOJE,MAAAA,UAAU,EAAEJ,MAAM,CAACnB,KAAK,CAACgB,MAAN,CAAaO,UAAd;AAPd;AAHa,IAArB;;AAcA,SACE,KAAC,mBAAD;AAAA,cACE,KAAC,aAAD;AAAe,MAAA,KAAK,EAAEvB,KAAtB;AAA6B,MAAA,QAAQ,EAAEC,QAAvC;AAAA,gBACE,KAAC,mBAAD;AAAqB,QAAA,KAAK,EAAEa,eAA5B;AAAA,kBACE,KAAC,IAAD;AADF;AADF;AADF,IADF;AASD,CAhDD","sourcesContent":["import React, {useEffect} from 'react';\r\nimport {Platform, StatusBar} from 'react-native';\r\nimport {useFonts} from 'expo-font';\r\nimport AppLoading from 'expo-app-loading';\r\nimport {NavigationContainer, DefaultTheme} from '@react-navigation/native';\r\n\r\nimport Menu from './Menu';\r\nimport {useData, ThemeProvider, TranslationProvider} from '../hooks';\r\n\r\nexport default () => {\r\n  const {isDark, theme, setTheme} = useData();\r\n\r\n  /* set the status bar based on isDark constant */\r\n  useEffect(() => {\r\n    Platform.OS === 'android' && StatusBar.setTranslucent(true);\r\n    StatusBar.setBarStyle(isDark ? 'light-content' : 'dark-content');\r\n    return () => {\r\n      StatusBar.setBarStyle('default');\r\n    };\r\n  }, [isDark]);\r\n\r\n  // load custom fonts\r\n  const [fontsLoaded] = useFonts({\r\n    'OpenSans-Light': theme.assets.OpenSansLight,\r\n    'OpenSans-Regular': theme.assets.OpenSansRegular,\r\n    'OpenSans-SemiBold': theme.assets.OpenSansSemiBold,\r\n    'OpenSans-ExtraBold': theme.assets.OpenSansExtraBold,\r\n    'OpenSans-Bold': theme.assets.OpenSansBold,\r\n  });\r\n\r\n  if (!fontsLoaded) {\r\n    return <AppLoading />;\r\n  }\r\n\r\n  const navigationTheme = {\r\n    ...DefaultTheme,\r\n    dark: isDark,\r\n    colors: {\r\n      ...DefaultTheme.colors,\r\n      border: 'rgba(0,0,0,0)',\r\n      text: String(theme.colors.text),\r\n      card: String(theme.colors.card),\r\n      primary: String(theme.colors.primary),\r\n      notification: String(theme.colors.primary),\r\n      background: String(theme.colors.background),\r\n    },\r\n  };\r\n\r\n  return (\r\n    <TranslationProvider>\r\n      <ThemeProvider theme={theme} setTheme={setTheme}>\r\n        <NavigationContainer theme={navigationTheme}>\r\n          <Menu />\r\n        </NavigationContainer>\r\n      </ThemeProvider>\r\n    </TranslationProvider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}