{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onPress\", \"haptic\", \"id\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useCallback, useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport * as Haptics from 'expo-haptics';\nimport { useTheme } from \"../hooks/\";\nimport Block from \"../components/Block\";\nimport Image from \"../components/Image\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Checkbox = function Checkbox(_ref) {\n  var onPress = _ref.onPress,\n      _ref$haptic = _ref.haptic,\n      haptic = _ref$haptic === void 0 ? true : _ref$haptic,\n      _ref$id = _ref.id,\n      id = _ref$id === void 0 ? 'Checkbox' : _ref$id,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors,\n      icons = _useTheme.icons,\n      sizes = _useTheme.sizes;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      checked = _useState2[0],\n      setChecked = _useState2[1];\n\n  var handlePress = useCallback(function () {\n    onPress == null ? void 0 : onPress(!checked);\n    setChecked(!checked);\n\n    if (haptic) {\n      Haptics.selectionAsync();\n    }\n  }, [checked, haptic, setChecked, onPress]);\n  var checkboxID = Platform.OS === 'android' ? {\n    accessibilityLabel: id\n  } : {\n    testID: id\n  };\n  return _jsx(Pressable, _objectSpread(_objectSpread({}, checkboxID), {}, {\n    hitSlop: sizes.s,\n    onPress: handlePress,\n    children: _jsx(Block, _objectSpread(_objectSpread({\n      flex: 0,\n      align: \"center\",\n      justify: \"center\",\n      gray: !checked,\n      outlined: !checked,\n      width: sizes.checkboxWidth,\n      height: sizes.checkboxHeight,\n      radius: sizes.checkboxRadius,\n      gradient: checked ? colors.checkbox : undefined\n    }, props), {}, {\n      children: checked && _jsx(Image, {\n        source: icons.check,\n        color: colors.checkboxIcon,\n        width: sizes.checkboxIconWidth,\n        height: sizes.checkboxIconHeight\n      })\n    }))\n  }));\n};\n\nexport default React.memo(Checkbox);","map":{"version":3,"sources":["C:/Users/shirz/Documents/GitHub/Activitygram/Presentation/Activitygram_Client/src/components/Checkbox.tsx"],"names":["React","useCallback","useState","Haptics","useTheme","Block","Image","Checkbox","onPress","haptic","id","props","colors","icons","sizes","checked","setChecked","handlePress","selectionAsync","checkboxID","Platform","OS","accessibilityLabel","testID","s","checkboxWidth","checkboxHeight","checkboxRadius","checkbox","undefined","check","checkboxIcon","checkboxIconWidth","checkboxIconHeight","memo"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,QAA5B,QAA2C,OAA3C;;;AAGA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;AAEA,SAAQC,QAAR;AACA,OAAOC,KAAP;AACA,OAAOC,KAAP;;;AAGA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAKK;AAAA,MAJpBC,OAIoB,QAJpBA,OAIoB;AAAA,yBAHpBC,MAGoB;AAAA,MAHpBA,MAGoB,4BAHX,IAGW;AAAA,qBAFpBC,EAEoB;AAAA,MAFpBA,EAEoB,wBAFf,UAEe;AAAA,MADjBC,KACiB;;AACpB,kBAA+BP,QAAQ,EAAvC;AAAA,MAAOQ,MAAP,aAAOA,MAAP;AAAA,MAAeC,KAAf,aAAeA,KAAf;AAAA,MAAsBC,KAAtB,aAAsBA,KAAtB;;AACA,kBAA8BZ,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOa,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,WAAW,GAAGhB,WAAW,CAAC,YAAM;AACpCO,IAAAA,OAAO,QAAP,YAAAA,OAAO,CAAG,CAACO,OAAJ,CAAP;AACAC,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;;AAGA,QAAIN,MAAJ,EAAY;AACVN,MAAAA,OAAO,CAACe,cAAR;AACD;AACF,GAR8B,EAQ5B,CAACH,OAAD,EAAUN,MAAV,EAAkBO,UAAlB,EAA8BR,OAA9B,CAR4B,CAA/B;AAWA,MAAMW,UAAU,GACdC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4B;AAACC,IAAAA,kBAAkB,EAAEZ;AAArB,GAA5B,GAAuD;AAACa,IAAAA,MAAM,EAAEb;AAAT,GADzD;AAGA,SACE,KAAC,SAAD,kCAAeS,UAAf;AAA2B,IAAA,OAAO,EAAEL,KAAK,CAACU,CAA1C;AAA6C,IAAA,OAAO,EAAEP,WAAtD;AAAA,cACE,KAAC,KAAD;AACE,MAAA,IAAI,EAAE,CADR;AAEE,MAAA,KAAK,EAAC,QAFR;AAGE,MAAA,OAAO,EAAC,QAHV;AAIE,MAAA,IAAI,EAAE,CAACF,OAJT;AAKE,MAAA,QAAQ,EAAE,CAACA,OALb;AAME,MAAA,KAAK,EAAED,KAAK,CAACW,aANf;AAOE,MAAA,MAAM,EAAEX,KAAK,CAACY,cAPhB;AAQE,MAAA,MAAM,EAAEZ,KAAK,CAACa,cARhB;AASE,MAAA,QAAQ,EAAEZ,OAAO,GAAGH,MAAM,CAACgB,QAAV,GAAqBC;AATxC,OAUMlB,KAVN;AAAA,gBAWGI,OAAO,IACN,KAAC,KAAD;AACE,QAAA,MAAM,EAAEF,KAAK,CAACiB,KADhB;AAEE,QAAA,KAAK,EAAElB,MAAM,CAACmB,YAFhB;AAGE,QAAA,KAAK,EAAEjB,KAAK,CAACkB,iBAHf;AAIE,QAAA,MAAM,EAAElB,KAAK,CAACmB;AAJhB;AAZJ;AADF,KADF;AAwBD,CA/CD;;AAiDA,eAAejC,KAAK,CAACkC,IAAN,CAAW3B,QAAX,CAAf","sourcesContent":["import React, {useCallback, useState} from 'react';\r\nimport {Platform, Pressable} from 'react-native';\r\n\r\nimport * as Haptics from 'expo-haptics';\r\n\r\nimport {useTheme} from '../hooks/';\r\nimport Block from '../components/Block';\r\nimport Image from '../components/Image';\r\nimport {ICheckboxProps} from '../constants/types';\r\n\r\nconst Checkbox = ({\r\n  onPress,\r\n  haptic = true,\r\n  id = 'Checkbox',\r\n  ...props\r\n}: ICheckboxProps) => {\r\n  const {colors, icons, sizes} = useTheme();\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  const handlePress = useCallback(() => {\r\n    onPress?.(!checked);\r\n    setChecked(!checked);\r\n\r\n    /* haptic feedback onPress */\r\n    if (haptic) {\r\n      Haptics.selectionAsync();\r\n    }\r\n  }, [checked, haptic, setChecked, onPress]);\r\n\r\n  // generate component testID or accessibilityLabel based on Platform.OS\r\n  const checkboxID =\r\n    Platform.OS === 'android' ? {accessibilityLabel: id} : {testID: id};\r\n\r\n  return (\r\n    <Pressable {...checkboxID} hitSlop={sizes.s} onPress={handlePress}>\r\n      <Block\r\n        flex={0}\r\n        align=\"center\"\r\n        justify=\"center\"\r\n        gray={!checked}\r\n        outlined={!checked}\r\n        width={sizes.checkboxWidth}\r\n        height={sizes.checkboxHeight}\r\n        radius={sizes.checkboxRadius}\r\n        gradient={checked ? colors.checkbox : undefined}\r\n        {...props}>\r\n        {checked && (\r\n          <Image\r\n            source={icons.check}\r\n            color={colors.checkboxIcon}\r\n            width={sizes.checkboxIconWidth}\r\n            height={sizes.checkboxIconHeight}\r\n          />\r\n        )}\r\n      </Block>\r\n    </Pressable>\r\n  );\r\n};\r\n\r\nexport default React.memo(Checkbox);"]},"metadata":{},"sourceType":"module"}