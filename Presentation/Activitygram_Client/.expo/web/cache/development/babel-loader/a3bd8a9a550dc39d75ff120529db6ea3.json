{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { BigListItemType } from \"./BigListItem\";\nimport BigListItemRecycler from \"./BigListItemRecycler\";\nimport { isNumeric } from \"./utils\";\n\nvar BigListProcessor = function () {\n  function BigListProcessor(_ref) {\n    var scrollView = _ref.scrollView,\n        sections = _ref.sections,\n        headerHeight = _ref.headerHeight,\n        footerHeight = _ref.footerHeight,\n        sectionHeaderHeight = _ref.sectionHeaderHeight,\n        itemHeight = _ref.itemHeight,\n        sectionFooterHeight = _ref.sectionFooterHeight,\n        insetTop = _ref.insetTop,\n        insetBottom = _ref.insetBottom,\n        numColumns = _ref.numColumns;\n\n    _classCallCheck(this, BigListProcessor);\n\n    this.headerHeight = headerHeight;\n    this.footerHeight = footerHeight;\n    this.sectionHeaderHeight = sectionHeaderHeight;\n    this.itemHeight = itemHeight;\n    this.sectionFooterHeight = sectionFooterHeight;\n    this.sections = sections;\n    this.insetTop = insetTop;\n    this.insetBottom = insetBottom;\n    this.uniform = isNumeric(itemHeight);\n    this.scrollView = scrollView;\n    this.numColumns = numColumns;\n  }\n\n  _createClass(BigListProcessor, [{\n    key: \"getItemHeight\",\n    value: function getItemHeight(section, index) {\n      var itemHeight = this.itemHeight;\n      return isNumeric(itemHeight) ? Number(itemHeight) : itemHeight(section, index);\n    }\n  }, {\n    key: \"getHeaderHeight\",\n    value: function getHeaderHeight() {\n      var headerHeight = this.headerHeight;\n      return isNumeric(headerHeight) ? Number(headerHeight) : headerHeight();\n    }\n  }, {\n    key: \"getFooterHeight\",\n    value: function getFooterHeight() {\n      var footerHeight = this.footerHeight;\n      return isNumeric(footerHeight) ? Number(footerHeight) : footerHeight();\n    }\n  }, {\n    key: \"getSectionHeaderHeight\",\n    value: function getSectionHeaderHeight(section) {\n      var sectionHeaderHeight = this.sectionHeaderHeight;\n      return isNumeric(sectionHeaderHeight) ? Number(sectionHeaderHeight) : sectionHeaderHeight(section);\n    }\n  }, {\n    key: \"getSectionFooterHeight\",\n    value: function getSectionFooterHeight(section) {\n      var sectionFooterHeight = this.sectionFooterHeight;\n      return isNumeric(sectionFooterHeight) ? Number(sectionFooterHeight) : sectionFooterHeight(section);\n    }\n  }, {\n    key: \"process\",\n    value: function process(top, bottom, prevItems) {\n      var _this = this;\n\n      var sections = this.sections;\n      var items = [];\n      var recycler = new BigListItemRecycler(prevItems);\n      var position;\n      var counter = -1;\n      var height = this.insetTop;\n      var spacerHeight = height;\n\n      var isFullRow = function isFullRow(item) {\n        return item.type !== BigListItemType.ITEM;\n      };\n\n      var isVisibleBelow = function isVisibleBelow(item) {\n        var itemHeight = item.height;\n        counter = -1;\n\n        if (height > bottom) {\n          spacerHeight += itemHeight;\n          return false;\n        } else {\n          return true;\n        }\n      };\n\n      var isVisible = function isVisible(item) {\n        var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (item.type === BigListItemType.SECTION_HEADER) {\n          return isVisibleBelow(item);\n        }\n\n        var itemHeight = item.height;\n        var fullRow = isFullRow(item);\n        var prevHeight = height;\n        counter = fullRow ? -1 : counter + 1;\n\n        if (fullRow || counter % _this.numColumns === 0) {\n          height += itemHeight;\n        }\n\n        if (force || height > top && prevHeight < bottom) {\n          return true;\n        } else {\n          if (fullRow || counter % _this.numColumns === 0) {\n            spacerHeight += itemHeight;\n          }\n\n          return false;\n        }\n      };\n\n      var push = function push() {\n        for (var _len = arguments.length, itemsArray = new Array(_len), _key = 0; _key < _len; _key++) {\n          itemsArray[_key] = arguments[_key];\n        }\n\n        itemsArray.forEach(function (item) {\n          items.push(recycler.get(item));\n        });\n      };\n\n      var pushSpacer = function pushSpacer(item) {\n        if (spacerHeight > 0) {\n          push({\n            type: BigListItemType.SPACER,\n            position: item.position - spacerHeight,\n            height: spacerHeight,\n            section: item.section,\n            index: item.index\n          });\n          spacerHeight = 0;\n        }\n      };\n\n      var pushItem = function pushItem(item) {\n        var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (isVisible(item, force)) {\n          pushSpacer(item);\n          push(item);\n        }\n      };\n\n      var getSpacerHeight = function getSpacerHeight() {\n        var itemsCounter = -1;\n        return items.reduce(function (totalHeight, item, i) {\n          if (i !== items.length - 1) {\n            var fullRow = isFullRow(item);\n            itemsCounter = fullRow ? 0 : itemsCounter + 1;\n\n            if (fullRow || itemsCounter % _this.numColumns === 0) {\n              return totalHeight + item.height;\n            }\n          }\n\n          return totalHeight;\n        }, 0);\n      };\n\n      var headerHeight = this.getHeaderHeight();\n\n      if (headerHeight > 0) {\n        position = height;\n        pushItem({\n          type: BigListItemType.HEADER,\n          position: position,\n          height: headerHeight\n        }, true);\n      }\n\n      for (var section = 0; section < sections.length; section++) {\n        var rows = sections[section];\n\n        if (rows === 0) {\n          continue;\n        }\n\n        var sectionHeaderHeight = this.getSectionHeaderHeight(section);\n        position = height;\n        height += sectionHeaderHeight;\n\n        if (section > 1 && items.length > 0 && items[items.length - 1].type === BigListItemType.SECTION_HEADER) {\n          var initialSpacerHeight = getSpacerHeight();\n          var prevSection = items[items.length - 1];\n          items.splice(0, items.length);\n          push({\n            type: BigListItemType.HEADER,\n            position: position,\n            height: headerHeight\n          }, {\n            type: BigListItemType.SPACER,\n            position: 0,\n            height: initialSpacerHeight - headerHeight,\n            section: prevSection.section,\n            index: 0\n          }, prevSection);\n        }\n\n        pushItem({\n          type: BigListItemType.SECTION_HEADER,\n          position: position,\n          height: sectionHeaderHeight,\n          section: section\n        });\n        var itemHeight = this.getItemHeight(section);\n\n        for (var index = 0; index < rows; index++) {\n          if (!this.uniform) {\n            itemHeight = this.getItemHeight(section, index);\n          }\n\n          position = height;\n          pushItem({\n            type: BigListItemType.ITEM,\n            position: position,\n            height: itemHeight,\n            section: section,\n            index: index\n          });\n        }\n\n        var sectionFooterHeight = this.getSectionFooterHeight(section);\n\n        if (sectionFooterHeight > 0) {\n          position = height;\n          pushItem({\n            type: BigListItemType.SECTION_FOOTER,\n            position: position,\n            height: sectionFooterHeight,\n            section: section\n          });\n        }\n      }\n\n      var footerHeight = this.getFooterHeight();\n\n      if (footerHeight > 0) {\n        position = height;\n        pushItem({\n          type: BigListItemType.FOOTER,\n          position: position,\n          height: footerHeight\n        }, true);\n      }\n\n      height += this.insetBottom;\n      spacerHeight += this.insetBottom;\n\n      if (spacerHeight > 0) {\n        push({\n          type: BigListItemType.SPACER,\n          position: height - spacerHeight,\n          height: spacerHeight,\n          section: sections.length\n        });\n      }\n\n      recycler.fill();\n      return {\n        height: height,\n        items: items\n      };\n    }\n  }, {\n    key: \"scrollToPosition\",\n    value: function scrollToPosition(targetSection, targetIndex, animated) {\n      var sections = this.sections,\n          insetTop = this.insetTop;\n      var scrollTop = insetTop + this.getHeaderHeight();\n      var section = 0;\n      var foundIndex = false;\n\n      while (section <= targetSection) {\n        var rows = Math.ceil(sections[section] / this.numColumns);\n\n        if (rows === 0) {\n          section += 1;\n          continue;\n        }\n\n        scrollTop += this.getSectionHeaderHeight(section);\n\n        if (this.uniform) {\n          var uniformHeight = this.getItemHeight(section);\n\n          if (section === targetSection) {\n            scrollTop += uniformHeight * Math.ceil(targetIndex / this.numColumns);\n            foundIndex = true;\n          } else {\n            scrollTop += uniformHeight * rows;\n          }\n        } else {\n          for (var index = 0; index < rows; index++) {\n            if (section < targetSection || section === targetSection && index < targetIndex) {\n              scrollTop += this.getItemHeight(section, Math.ceil(index / this.numColumns));\n            } else if (section === targetSection && index === targetIndex) {\n              foundIndex = true;\n              break;\n            }\n          }\n        }\n\n        if (!foundIndex) {\n          scrollTop += this.getSectionFooterHeight(section);\n        }\n\n        section += 1;\n      }\n\n      this.scrollView.scrollTo({\n        x: 0,\n        y: Math.max(0, scrollTop - this.getSectionHeaderHeight(targetSection)),\n        animated: animated\n      });\n      return true;\n    }\n  }]);\n\n  return BigListProcessor;\n}();\n\nexport { BigListProcessor as default };","map":{"version":3,"sources":["BigListProcessor.js"],"names":["constructor","numColumns","isNumeric","getItemHeight","section","itemHeight","getFooterHeight","footerHeight","getSectionHeaderHeight","sectionHeaderHeight","getSectionFooterHeight","sectionFooterHeight","process","bottom","height","counter","fullRow","force","spacerHeight","pushSpacer","push","index","getSpacerHeight","itemsCounter","totalHeight","headerHeight","position","pushItem","BigListItemType","rows","prevSection","items","splice","type","uniform","recycler","scrollToPosition","insetTop","scrollTop"],"mappings":"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","sourcesContent":["import { BigListItemType } from \"./BigListItem\";\nimport BigListItemRecycler from \"./BigListItemRecycler\";\nimport { isNumeric } from \"./utils\";\n\nexport default class BigListProcessor {\n  /**\n   * Constructor.\n   * @param {ScrollView} scrollView\n   * @param {array[]|object|null|undefined} sections\n   * @param {number|function|null|undefined} headerHeight\n   * @param {number|function|null|undefined} footerHeight\n   * @param {number|function|null|undefined} sectionHeaderHeight\n   * @param {number|function|null|undefined} itemHeight\n   * @param {number|function|null|undefined} sectionFooterHeight\n   * @param {number|function|null|undefined} insetTop\n   * @param {number|function|null|undefined} insetBottom\n   * @param {number|null|undefined} numColumns\n   */\n  constructor({\n    scrollView,\n    sections,\n    headerHeight,\n    footerHeight,\n    sectionHeaderHeight,\n    itemHeight,\n    sectionFooterHeight,\n    insetTop,\n    insetBottom,\n    numColumns,\n  }) {\n    this.headerHeight = headerHeight;\n    this.footerHeight = footerHeight;\n    this.sectionHeaderHeight = sectionHeaderHeight;\n    this.itemHeight = itemHeight;\n    this.sectionFooterHeight = sectionFooterHeight;\n    this.sections = sections;\n    this.insetTop = insetTop;\n    this.insetBottom = insetBottom;\n    this.uniform = isNumeric(itemHeight);\n    this.scrollView = scrollView;\n    this.numColumns = numColumns;\n  }\n\n  /**\n   * Get item height.\n   * @returns {number|*}\n   */\n  getItemHeight(section, index) {\n    const { itemHeight } = this;\n    return isNumeric(itemHeight)\n      ? Number(itemHeight)\n      : itemHeight(section, index);\n  }\n\n  /**\n   * Get header height.\n   * @returns {number|*}\n   */\n  getHeaderHeight() {\n    const { headerHeight } = this;\n    return isNumeric(headerHeight) ? Number(headerHeight) : headerHeight();\n  }\n\n  /**\n   * Get footer height.\n   * @returns {number|*}\n   */\n  getFooterHeight() {\n    const { footerHeight } = this;\n    return isNumeric(footerHeight) ? Number(footerHeight) : footerHeight();\n  }\n\n  /**\n   * Get section height.\n   * @returns {number|*}\n   */\n  getSectionHeaderHeight(section) {\n    const { sectionHeaderHeight } = this;\n    return isNumeric(sectionHeaderHeight)\n      ? Number(sectionHeaderHeight)\n      : sectionHeaderHeight(section);\n  }\n\n  /**\n   * Get section footer height.\n   * @returns {number|*}\n   */\n  getSectionFooterHeight(section) {\n    const { sectionFooterHeight } = this;\n    return isNumeric(sectionFooterHeight)\n      ? Number(sectionFooterHeight)\n      : sectionFooterHeight(section);\n  }\n\n  /**\n   * Process list items.\n   * @param {number} top\n   * @param {number} bottom\n   * @param {array} prevItems\n   * @returns {{items: [], height: *}}\n   */\n  process(top, bottom, prevItems) {\n    const { sections } = this;\n    const items = [];\n    const recycler = new BigListItemRecycler(prevItems);\n\n    let position;\n    let counter = -1; // Counter of items per row pushed\n    let height = this.insetTop;\n    let spacerHeight = height;\n\n    /**\n     * The width of the row is the entire line.\n     * @param {object} item\n     * @returns {boolean}\n     */\n    const isFullRow = (item) => {\n      // Only items can be rendered with column format, so all others are full row\n      return item.type !== BigListItemType.ITEM;\n    };\n\n    /**\n     * Is visible below.\n     * @param {object} item\n     * @returns {boolean}\n     */\n    const isVisibleBelow = (item) => {\n      const { height: itemHeight } = item;\n      counter = -1;\n      if (height > bottom) {\n        spacerHeight += itemHeight;\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    /**\n     * Is the item visible.\n     * @param {object} item\n     * @param {bool} force\n     * @returns {boolean}\n     */\n    const isVisible = (item, force = false) => {\n      // Check section headers visibility below\n      if (item.type === BigListItemType.SECTION_HEADER) {\n        return isVisibleBelow(item);\n      }\n      // Dimensions\n      const { height: itemHeight } = item;\n      const fullRow = isFullRow(item);\n      const prevHeight = height;\n      // Increase or reset counter\n      counter = fullRow ? -1 : counter + 1;\n      if (fullRow || counter % this.numColumns === 0) {\n        height += itemHeight;\n      }\n      // Check if is visible\n      if (force || (height > top && prevHeight < bottom)) {\n        return true;\n      } else {\n        if (fullRow || counter % this.numColumns === 0) {\n          spacerHeight += itemHeight;\n        }\n        return false;\n      }\n    };\n\n    /**\n     * Get recycled views and push items.\n     * @param {object} itemsArray\n     */\n    const push = (...itemsArray) => {\n      itemsArray.forEach((item) => {\n        items.push(recycler.get(item));\n      });\n    };\n\n    /**\n     * Push spacer.\n     * @param {object} item\n     */\n    const pushSpacer = (item) => {\n      if (spacerHeight > 0) {\n        push({\n          type: BigListItemType.SPACER,\n          position: item.position - spacerHeight,\n          height: spacerHeight,\n          section: item.section,\n          index: item.index,\n        });\n        spacerHeight = 0;\n      }\n    };\n\n    /**\n     * Push the item when is visible.\n     * @param {object} item\n     * @param {bool} force\n     */\n    const pushItem = (item, force = false) => {\n      if (isVisible(item, force)) {\n        pushSpacer(item);\n        push(item);\n      }\n    };\n\n    /**\n     * Calculate spacer height.\n     */\n    const getSpacerHeight = () => {\n      let itemsCounter = -1;\n      return items.reduce((totalHeight, item, i) => {\n        if (i !== items.length - 1) {\n          const fullRow = isFullRow(item);\n          itemsCounter = fullRow ? 0 : itemsCounter + 1;\n          if (fullRow || itemsCounter % this.numColumns === 0) {\n            return totalHeight + item.height;\n          }\n        }\n        return totalHeight;\n      }, 0);\n    };\n\n    // Header\n    const headerHeight = this.getHeaderHeight();\n    if (headerHeight > 0) {\n      position = height;\n      pushItem(\n        {\n          type: BigListItemType.HEADER,\n          position: position,\n          height: headerHeight,\n        },\n        true,\n      );\n    }\n    // Sections\n    for (let section = 0; section < sections.length; section++) {\n      const rows = sections[section];\n      if (rows === 0) {\n        continue;\n      }\n      // Section Header\n      const sectionHeaderHeight = this.getSectionHeaderHeight(section);\n      position = height;\n      height += sectionHeaderHeight;\n      if (\n        section > 1 &&\n        items.length > 0 &&\n        items[items.length - 1].type === BigListItemType.SECTION_HEADER\n      ) {\n        // Top Spacer\n        const initialSpacerHeight = getSpacerHeight();\n        const prevSection = items[items.length - 1];\n        items.splice(0, items.length);\n        push(\n          {\n            type: BigListItemType.HEADER,\n            position: position,\n            height: headerHeight,\n          },\n          {\n            type: BigListItemType.SPACER,\n            position: 0,\n            height: initialSpacerHeight - headerHeight,\n            section: prevSection.section,\n            index: 0,\n          },\n          prevSection,\n        );\n      }\n      pushItem({\n        type: BigListItemType.SECTION_HEADER,\n        position: position,\n        height: sectionHeaderHeight,\n        section: section,\n      });\n      // Items\n      let itemHeight = this.getItemHeight(section);\n      for (let index = 0; index < rows; index++) {\n        if (!this.uniform) {\n          itemHeight = this.getItemHeight(section, index);\n        }\n        position = height;\n        pushItem({\n          type: BigListItemType.ITEM,\n          position: position,\n          height: itemHeight,\n          section: section,\n          index: index,\n        });\n      }\n      // Section Footer\n      const sectionFooterHeight = this.getSectionFooterHeight(section);\n      if (sectionFooterHeight > 0) {\n        position = height;\n        pushItem({\n          type: BigListItemType.SECTION_FOOTER,\n          position: position,\n          height: sectionFooterHeight,\n          section: section,\n        });\n      }\n    }\n    // Footer\n    const footerHeight = this.getFooterHeight();\n    if (footerHeight > 0) {\n      position = height;\n      pushItem(\n        {\n          type: BigListItemType.FOOTER,\n          position: position,\n          height: footerHeight,\n        },\n        true,\n      );\n    }\n    // Bottom Spacer\n    height += this.insetBottom;\n    spacerHeight += this.insetBottom;\n    if (spacerHeight > 0) {\n      push({\n        type: BigListItemType.SPACER,\n        position: height - spacerHeight,\n        height: spacerHeight,\n        section: sections.length,\n      });\n    }\n    recycler.fill();\n    return {\n      height,\n      items,\n    };\n  }\n\n  /**\n   * Scroll to position.\n   * @param {int} targetSection\n   * @param {int} targetIndex\n   * @param {boolean} animated\n   */\n  scrollToPosition(targetSection, targetIndex, animated) {\n    const { sections, insetTop } = this;\n\n    // Header + inset\n    let scrollTop = insetTop + this.getHeaderHeight();\n    let section = 0;\n    let foundIndex = false;\n    while (section <= targetSection) {\n      const rows = Math.ceil(sections[section] / this.numColumns);\n      if (rows === 0) {\n        section += 1;\n        continue;\n      }\n      // Section header\n      scrollTop += this.getSectionHeaderHeight(section);\n\n      // Items\n      if (this.uniform) {\n        const uniformHeight = this.getItemHeight(section);\n        if (section === targetSection) {\n          scrollTop += uniformHeight * Math.ceil(targetIndex / this.numColumns);\n          foundIndex = true;\n        } else {\n          scrollTop += uniformHeight * rows;\n        }\n      } else {\n        for (let index = 0; index < rows; index++) {\n          if (\n            section < targetSection ||\n            (section === targetSection && index < targetIndex)\n          ) {\n            scrollTop += this.getItemHeight(\n              section,\n              Math.ceil(index / this.numColumns),\n            );\n          } else if (section === targetSection && index === targetIndex) {\n            foundIndex = true;\n            break;\n          }\n        }\n      }\n\n      // Section footer\n      if (!foundIndex) {\n        scrollTop += this.getSectionFooterHeight(section);\n      }\n      section += 1;\n    }\n    this.scrollView.scrollTo({\n      x: 0,\n      y: Math.max(0, scrollTop - this.getSectionHeaderHeight(targetSection)),\n      animated,\n    });\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}