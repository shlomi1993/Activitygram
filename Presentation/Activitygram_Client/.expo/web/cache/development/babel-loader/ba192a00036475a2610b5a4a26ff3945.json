{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport Profile from \"../screens/profile\";\nimport EventList from \"../screens/eventList\";\nimport Event from \"../screens/event\";\nimport Setting from \"../screens/setting\";\nimport Create from \"../screens/create\";\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { Icon } from 'react-native-elements';\nimport SettingOption from \"../screens/setting/Options\";\nReact.createElement(\"style\", null, \"@import url('https://fonts.googleapis.com/css2?family=Lato:wght@300&display=swap');\");\nvar SettingStack = createNativeStackNavigator();\n\nfunction SettingsStackScreen() {\n  return React.createElement(SettingStack.Navigator, null, React.createElement(SettingStack.Screen, {\n    name: \"Settings\",\n    component: Setting\n  }), React.createElement(SettingStack.Screen, {\n    name: \"Options\",\n    component: SettingOption\n  }));\n}\n\nvar EventStack = createNativeStackNavigator();\n\nfunction EventStackScreen() {\n  return React.createElement(EventStack.Navigator, null, React.createElement(EventStack.Screen, {\n    name: \"Event\",\n    component: Event\n  }));\n}\n\nvar ProfileStack = createNativeStackNavigator();\n\nfunction ProfileStackScreen() {\n  return React.createElement(ProfileStack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    }\n  }, React.createElement(ProfileStack.Screen, {\n    name: \"Profile\",\n    component: Profile\n  }));\n}\n\nvar EventListStack = createNativeStackNavigator();\n\nfunction EventListStackScreen() {\n  return React.createElement(EventListStack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    }\n  }, React.createElement(EventListStack.Screen, {\n    name: \"EventList\",\n    component: EventList\n  }));\n}\n\nvar CreateStack = createNativeStackNavigator();\n\nfunction CreateStackScreen() {\n  return React.createElement(CreateStack.Navigator, null, React.createElement(CreateStack.Screen, {\n    name: \"Search\",\n    component: Create\n  }));\n}\n\nvar Tab = createBottomTabNavigator();\n\nvar HomeIcon = function HomeIcon(_ref) {\n  var focused = _ref.focused,\n      tintColor = _ref.tintColor;\n  return React.createElement(Icon, {\n    name: \"lens\",\n    type: \"material\",\n    size: 26,\n    color: focused ? '#adacac' : '#ededed'\n  });\n};\n\nvar TabsManager = function (_React$Component) {\n  _inherits(TabsManager, _React$Component);\n\n  var _super = _createSuper(TabsManager);\n\n  function TabsManager() {\n    _classCallCheck(this, TabsManager);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TabsManager, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Tab.Navigator, {\n        screenOptions: function screenOptions(_ref2) {\n          var route = _ref2.route;\n          return {\n            tabBarIcon: function tabBarIcon(props) {\n              return React.createElement(HomeIcon, props);\n            }\n          };\n        },\n        tabBarOptions: {\n          activeTintColor: 'tomato',\n          inactiveTintColor: 'gray',\n          showLabel: false,\n          showIcon: true,\n          indicatorStyle: {\n            backgroundColor: 'transparent'\n          },\n          labelStyle: {\n            fontSize: 12\n          },\n          iconStyle: {\n            width: 30,\n            height: 30\n          },\n          style: {\n            justifyContent: 'center'\n          }\n        }\n      }, React.createElement(Tab.Screen, {\n        name: \"Profile\",\n        component: ProfileStackScreen\n      }), React.createElement(Tab.Screen, {\n        name: \"Event\",\n        component: EventStackScreen\n      }), React.createElement(Tab.Screen, {\n        name: \"EventList\",\n        component: EventListStackScreen\n      }), React.createElement(Tab.Screen, {\n        name: \"Settings\",\n        component: SettingsStackScreen\n      }), React.createElement(Tab.Screen, {\n        name: \"Search\",\n        component: CreateStackScreen\n      }));\n    }\n  }]);\n\n  return TabsManager;\n}(React.Component);\n\nexport default TabsManager;","map":{"version":3,"sources":["C:/Users/shirz/Documents/GitHub/Activitygram/Presentation/Activitygram_Client/src/TabsManager/TabsManager.js"],"names":["React","createNativeStackNavigator","Profile","EventList","Event","Setting","Create","createBottomTabNavigator","Icon","SettingOption","SettingStack","SettingsStackScreen","EventStack","EventStackScreen","ProfileStack","ProfileStackScreen","headerShown","EventListStack","EventListStackScreen","CreateStack","CreateStackScreen","Tab","HomeIcon","focused","tintColor","TabsManager","route","tabBarIcon","props","activeTintColor","inactiveTintColor","showLabel","showIcon","indicatorStyle","backgroundColor","labelStyle","fontSize","iconStyle","width","height","style","justifyContent","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport Profile from '../screens/profile'\r\nimport EventList from '../screens/eventList'\r\nimport Event from '../screens/event'\r\nimport Setting from '../screens/setting'\r\nimport Create from '../screens/create'\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport { Icon } from 'react-native-elements';\r\nimport SettingOption from '../screens/setting/Options'\r\n\r\n<style>\r\n@import url('https://fonts.googleapis.com/css2?family=Lato:wght@300&display=swap');\r\n</style>\r\n\r\nconst SettingStack = createNativeStackNavigator()\r\nfunction SettingsStackScreen() {\r\n  return (\r\n    <SettingStack.Navigator>\r\n      <SettingStack.Screen name=\"Settings\" component={Setting} />\r\n      <SettingStack.Screen name=\"Options\" component={SettingOption} />\r\n    </SettingStack.Navigator>\r\n  )\r\n}\r\n\r\nconst EventStack = createNativeStackNavigator()\r\nfunction EventStackScreen() {\r\n  return (\r\n    <EventStack.Navigator>\r\n      <EventStack.Screen name=\"Event\" component={Event} />\r\n    </EventStack.Navigator>\r\n  )\r\n}\r\n\r\nconst ProfileStack = createNativeStackNavigator()\r\nfunction ProfileStackScreen() {\r\n  return (\r\n    <ProfileStack.Navigator\r\n      screenOptions={{\r\n        headerShown: false\r\n      }}\r\n    >\r\n      <ProfileStack.Screen name=\"Profile\" component={Profile} />\r\n    </ProfileStack.Navigator>\r\n  )\r\n}\r\n\r\nconst EventListStack = createNativeStackNavigator()\r\nfunction EventListStackScreen() {\r\n  return (\r\n    <EventListStack.Navigator\r\n      screenOptions={{\r\n        headerShown: false\r\n      }}\r\n    >\r\n      <EventListStack.Screen name=\"EventList\" component={EventList} />\r\n    </EventListStack.Navigator>\r\n  )\r\n}\r\nconst CreateStack = createNativeStackNavigator()\r\nfunction CreateStackScreen() {\r\n  return (\r\n    <CreateStack.Navigator>\r\n      <CreateStack.Screen name=\"Search\" component={Create} />\r\n    </CreateStack.Navigator>\r\n  )\r\n}\r\n\r\nconst Tab = createBottomTabNavigator()\r\n\r\nconst HomeIcon = ({ focused, tintColor }) => (\r\n  <Icon\r\n    name=\"lens\"\r\n    type=\"material\"\r\n    size={26}\r\n    color={focused ? '#adacac' : '#ededed'}\r\n  />\r\n)\r\n\r\nclass TabsManager extends React.Component {\r\n\r\n    render() {\r\n    return (\r\n      <Tab.Navigator \r\n        screenOptions={({ route }) => ({\r\n          tabBarIcon: props => <HomeIcon {...props}/>\r\n        })}\r\n        tabBarOptions={{\r\n          activeTintColor: 'tomato',\r\n          inactiveTintColor: 'gray',\r\n          showLabel: false,\r\n          showIcon: true,\r\n          indicatorStyle: {\r\n            backgroundColor: 'transparent',\r\n          },\r\n          labelStyle: {\r\n            fontSize: 12,\r\n          },\r\n          iconStyle: {\r\n            width: 30,\r\n            height: 30,\r\n          },\r\n          style: {\r\n            // backgroundColor: 'transparent',\r\n            justifyContent: 'center',\r\n          },\r\n        }}\r\n      >\r\n        <Tab.Screen name=\"Profile\" component={ProfileStackScreen} />\r\n        <Tab.Screen name=\"Event\" component={EventStackScreen} />\r\n        <Tab.Screen name=\"EventList\" component={EventListStackScreen} />\r\n        <Tab.Screen name=\"Settings\" component={SettingsStackScreen} />\r\n        <Tab.Screen name=\"Search\" component={CreateStackScreen} />\r\n      </Tab.Navigator>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default TabsManager;\r\n"]},"metadata":{},"sourceType":"module"}