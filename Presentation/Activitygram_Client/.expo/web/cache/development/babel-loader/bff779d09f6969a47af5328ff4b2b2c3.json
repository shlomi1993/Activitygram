{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"id\", \"checked\", \"thumbColor\", \"activeFillColor\", \"inactiveFillColor\", \"duration\", \"thumbStyle\", \"switchStyle\", \"style\", \"onPress\", \"haptic\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as Haptics from 'expo-haptics';\nimport useTheme from \"../hooks/useTheme\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Switch = function Switch(_ref) {\n  var _ref$id = _ref.id,\n      id = _ref$id === void 0 ? 'Switch' : _ref$id,\n      _ref$checked = _ref.checked,\n      checked = _ref$checked === void 0 ? false : _ref$checked,\n      _ref$thumbColor = _ref.thumbColor,\n      thumbColor = _ref$thumbColor === void 0 ? 'white' : _ref$thumbColor,\n      activeFillColor = _ref.activeFillColor,\n      inactiveFillColor = _ref.inactiveFillColor,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? 250 : _ref$duration,\n      thumbStyle = _ref.thumbStyle,\n      switchStyle = _ref.switchStyle,\n      style = _ref.style,\n      onPress = _ref.onPress,\n      _ref$haptic = _ref.haptic,\n      haptic = _ref$haptic === void 0 ? true : _ref$haptic,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(checked),\n      _useState2 = _slicedToArray(_useState, 2),\n      isChecked = _useState2[0],\n      setChecked = _useState2[1];\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors,\n      sizes = _useTheme.sizes;\n\n  var activeColor = activeFillColor || colors.switchOn;\n  var inactiveColor = inactiveFillColor || colors.switchOff;\n  var animation = useRef(new Animated.Value(isChecked ? 28 : 2)).current;\n  var handleToggle = useCallback(function () {\n    setChecked(!isChecked);\n    onPress == null ? void 0 : onPress(!isChecked);\n\n    if (haptic) {\n      Haptics.selectionAsync();\n    }\n  }, [isChecked, haptic, setChecked, onPress]);\n  useEffect(function () {\n    Animated.timing(animation, {\n      duration: duration,\n      useNativeDriver: false,\n      toValue: isChecked ? 28 : 2\n    }).start();\n  }, [isChecked, animation, duration]);\n  useEffect(function () {\n    if (isChecked !== checked) {\n      setChecked(checked);\n    }\n  }, [isChecked, checked]);\n  var bgColor = animation.interpolate({\n    inputRange: [2, 28],\n    outputRange: [String(inactiveColor), String(activeColor)]\n  });\n  var switchStyles = StyleSheet.flatten([{\n    justifyContent: 'center',\n    alignContent: 'center',\n    backgroundColor: bgColor,\n    height: sizes.switchHeight\n  }, switchStyle]);\n  var thumbStyles = StyleSheet.flatten([thumbStyle, {\n    width: sizes.switchThumb,\n    height: sizes.switchThumb,\n    backgroundColor: thumbColor,\n    shadowColor: colors.shadow,\n    shadowOffset: {\n      width: sizes.shadowOffsetWidth,\n      height: sizes.shadowOffsetHeight\n    },\n    shadowOpacity: sizes.shadowOpacity,\n    shadowRadius: sizes.shadowRadius,\n    elevation: sizes.elevation,\n    borderRadius: sizes.switchThumb / 2,\n    transform: [{\n      translateX: animation\n    }]\n  }]);\n  var containerStyles = StyleSheet.flatten([style, {\n    overflow: 'hidden',\n    width: sizes.switchWidth,\n    height: sizes.switchHeight,\n    borderRadius: sizes.switchHeight\n  }]);\n  var switchID = Platform.OS === 'android' ? {\n    accessibilityLabel: id\n  } : {\n    testID: id\n  };\n  return _jsx(Pressable, _objectSpread(_objectSpread(_objectSpread({}, switchID), {}, {\n    hitSlop: sizes.s,\n    onPress: handleToggle,\n    style: containerStyles\n  }, props), {}, {\n    children: _jsx(Animated.View, {\n      style: switchStyles,\n      children: _jsx(Animated.View, {\n        style: thumbStyles\n      })\n    })\n  }));\n};\n\nexport default React.memo(Switch);","map":{"version":3,"sources":["C:/Users/shirz/Documents/GitHub/Activitygram/Presentation/Activitygram_Client/src/components/Switch.tsx"],"names":["React","useCallback","useEffect","useRef","useState","Haptics","useTheme","Switch","id","checked","thumbColor","activeFillColor","inactiveFillColor","duration","thumbStyle","switchStyle","style","onPress","haptic","props","isChecked","setChecked","colors","sizes","activeColor","switchOn","inactiveColor","switchOff","animation","Animated","Value","current","handleToggle","selectionAsync","timing","useNativeDriver","toValue","start","bgColor","interpolate","inputRange","outputRange","String","switchStyles","StyleSheet","flatten","justifyContent","alignContent","backgroundColor","height","switchHeight","thumbStyles","width","switchThumb","shadowColor","shadow","shadowOffset","shadowOffsetWidth","shadowOffsetHeight","shadowOpacity","shadowRadius","elevation","borderRadius","transform","translateX","containerStyles","overflow","switchWidth","switchID","Platform","OS","accessibilityLabel","testID","s","memo"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useRef, useState} from 'react';\r\nimport {\r\n  Animated,\r\n  Pressable,\r\n  Platform,\r\n  ViewStyle,\r\n  StyleSheet,\r\n} from 'react-native';\r\nimport * as Haptics from 'expo-haptics';\r\n\r\nimport {ISwitchProps} from '../constants/types';\r\nimport useTheme from '../hooks/useTheme';\r\n\r\nconst Switch = ({\r\n  id = 'Switch',\r\n  checked = false,\r\n  thumbColor = 'white',\r\n  activeFillColor,\r\n  inactiveFillColor,\r\n  duration = 250,\r\n  thumbStyle,\r\n  switchStyle,\r\n  style,\r\n  onPress,\r\n  haptic = true,\r\n  ...props\r\n}: ISwitchProps) => {\r\n  const [isChecked, setChecked] = useState(checked);\r\n  const {colors, sizes} = useTheme();\r\n  const activeColor = activeFillColor || colors.switchOn;\r\n  const inactiveColor = inactiveFillColor || colors.switchOff;\r\n\r\n  const animation = useRef(new Animated.Value(isChecked ? 28 : 2)).current;\r\n\r\n  const handleToggle = useCallback(() => {\r\n    setChecked(!isChecked);\r\n    onPress?.(!isChecked);\r\n\r\n    /* haptic feedback onPress */\r\n    if (haptic) {\r\n      Haptics.selectionAsync();\r\n    }\r\n  }, [isChecked, haptic, setChecked, onPress]);\r\n\r\n  useEffect(() => {\r\n    Animated.timing(animation, {\r\n      duration,\r\n      useNativeDriver: false,\r\n      toValue: isChecked ? 28 : 2,\r\n    }).start();\r\n  }, [isChecked, animation, duration]);\r\n\r\n  /* update local state for isChecked when checked prop is updated */\r\n  useEffect(() => {\r\n    if (isChecked !== checked) {\r\n      setChecked(checked);\r\n    }\r\n  }, [isChecked, checked]);\r\n\r\n  const bgColor = animation.interpolate({\r\n    inputRange: [2, 28],\r\n    outputRange: [String(inactiveColor), String(activeColor)],\r\n  });\r\n\r\n  const switchStyles = StyleSheet.flatten([\r\n    {\r\n      justifyContent: 'center',\r\n      alignContent: 'center',\r\n      backgroundColor: bgColor,\r\n      height: sizes.switchHeight,\r\n    },\r\n    switchStyle,\r\n  ]) as ViewStyle;\r\n\r\n  const thumbStyles = StyleSheet.flatten([\r\n    thumbStyle,\r\n    {\r\n      width: sizes.switchThumb,\r\n      height: sizes.switchThumb,\r\n      backgroundColor: thumbColor,\r\n      shadowColor: colors.shadow,\r\n      shadowOffset: {\r\n        width: sizes.shadowOffsetWidth,\r\n        height: sizes.shadowOffsetHeight,\r\n      },\r\n      shadowOpacity: sizes.shadowOpacity,\r\n      shadowRadius: sizes.shadowRadius,\r\n      elevation: sizes.elevation,\r\n      borderRadius: sizes.switchThumb / 2,\r\n      transform: [{translateX: animation}],\r\n    },\r\n  ]) as ViewStyle;\r\n\r\n  const containerStyles = StyleSheet.flatten([\r\n    style,\r\n    {\r\n      overflow: 'hidden',\r\n      width: sizes.switchWidth,\r\n      height: sizes.switchHeight,\r\n      borderRadius: sizes.switchHeight,\r\n    },\r\n  ]) as ViewStyle;\r\n\r\n  // generate component testID or accessibilityLabel based on Platform.OS\r\n  const switchID =\r\n    Platform.OS === 'android' ? {accessibilityLabel: id} : {testID: id};\r\n\r\n  return (\r\n    <Pressable\r\n      {...switchID}\r\n      hitSlop={sizes.s}\r\n      onPress={handleToggle}\r\n      style={containerStyles}\r\n      {...props}>\r\n      <Animated.View style={switchStyles}>\r\n        <Animated.View style={thumbStyles} />\r\n      </Animated.View>\r\n    </Pressable>\r\n  );\r\n};\r\n\r\nexport default React.memo(Switch);"]},"metadata":{},"sourceType":"module"}