{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"config\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport { LoggerProvider } from \"./contexts\";\nimport { ToastUI } from \"./ToastUI\";\nimport { useToast } from \"./useToast\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ToastRoot = React.forwardRef(function (props, ref) {\n  var config = props.config,\n      defaultOptions = _objectWithoutProperties(props, _excluded);\n\n  var _useToast = useToast({\n    defaultOptions: defaultOptions\n  }),\n      show = _useToast.show,\n      hide = _useToast.hide,\n      isVisible = _useToast.isVisible,\n      options = _useToast.options,\n      data = _useToast.data;\n\n  React.useImperativeHandle(ref, React.useCallback(function () {\n    return {\n      show: show,\n      hide: hide\n    };\n  }, [hide, show]));\n  return _jsx(ToastUI, {\n    isVisible: isVisible,\n    options: options,\n    data: data,\n    hide: hide,\n    show: show,\n    config: config\n  });\n});\nvar refs = [];\n\nfunction addNewRef(newRef) {\n  refs.push({\n    current: newRef\n  });\n}\n\nfunction removeOldRef(oldRef) {\n  refs = refs.filter(function (r) {\n    return r.current !== oldRef;\n  });\n}\n\nexport function Toast(props) {\n  var toastRef = React.useRef(null);\n  var setRef = React.useCallback(function (ref) {\n    if (ref) {\n      toastRef.current = ref;\n      addNewRef(ref);\n    } else {\n      removeOldRef(toastRef.current);\n    }\n  }, []);\n  return _jsx(LoggerProvider, {\n    enableLogs: false,\n    children: _jsx(ToastRoot, _objectSpread({\n      ref: setRef\n    }, props))\n  });\n}\n\nfunction getRef() {\n  var reversePriority = _toConsumableArray(refs).reverse();\n\n  var activeRef = reversePriority.find(function (ref) {\n    return (ref == null ? void 0 : ref.current) !== null;\n  });\n\n  if (!activeRef) {\n    return null;\n  }\n\n  return activeRef.current;\n}\n\nToast.show = function (params) {\n  var _getRef;\n\n  (_getRef = getRef()) == null ? void 0 : _getRef.show(params);\n};\n\nToast.hide = function (params) {\n  var _getRef2;\n\n  (_getRef2 = getRef()) == null ? void 0 : _getRef2.hide(params);\n};","map":{"version":3,"sources":["C:/Users/shirz/Documents/GitHub/Activitygram/Presentation/Activitygram_Client/node_modules/react-native-toast-message/lib/src/Toast.js"],"names":["React","LoggerProvider","ToastUI","useToast","ToastRoot","forwardRef","props","ref","config","defaultOptions","show","hide","isVisible","options","data","useImperativeHandle","useCallback","refs","addNewRef","newRef","push","current","removeOldRef","oldRef","filter","r","Toast","toastRef","useRef","setRef","getRef","reversePriority","reverse","activeRef","find","params"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT;AACA,SAASC,OAAT;AACA,SAASC,QAAT;;AACA,IAAMC,SAAS,GAAGJ,KAAK,CAACK,UAAN,CAAiB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC/C,MAAQC,MAAR,GAAsCF,KAAtC,CAAQE,MAAR;AAAA,MAAmBC,cAAnB,4BAAsCH,KAAtC;;AACA,kBAAiDH,QAAQ,CAAC;AACtDM,IAAAA,cAAc,EAAdA;AADsD,GAAD,CAAzD;AAAA,MAAQC,IAAR,aAAQA,IAAR;AAAA,MAAcC,IAAd,aAAcA,IAAd;AAAA,MAAoBC,SAApB,aAAoBA,SAApB;AAAA,MAA+BC,OAA/B,aAA+BA,OAA/B;AAAA,MAAwCC,IAAxC,aAAwCA,IAAxC;;AAIAd,EAAAA,KAAK,CAACe,mBAAN,CAA0BR,GAA1B,EAA+BP,KAAK,CAACgB,WAAN,CAAkB;AAAA,WAAO;AACpDN,MAAAA,IAAI,EAAJA,IADoD;AAEpDC,MAAAA,IAAI,EAAJA;AAFoD,KAAP;AAAA,GAAlB,EAG3B,CAACA,IAAD,EAAOD,IAAP,CAH2B,CAA/B;AAIA,SAAQ,KAAC,OAAD;AAAS,IAAA,SAAS,EAAEE,SAApB;AAA+B,IAAA,OAAO,EAAEC,OAAxC;AAAiD,IAAA,IAAI,EAAEC,IAAvD;AAA6D,IAAA,IAAI,EAAEH,IAAnE;AAAyE,IAAA,IAAI,EAAED,IAA/E;AAAqF,IAAA,MAAM,EAAEF;AAA7F,IAAR;AACH,CAXiB,CAAlB;AAYA,IAAIS,IAAI,GAAG,EAAX;;AAMA,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACvBF,EAAAA,IAAI,CAACG,IAAL,CAAU;AACNC,IAAAA,OAAO,EAAEF;AADH,GAAV;AAGH;;AAMD,SAASG,YAAT,CAAsBC,MAAtB,EAA8B;AAC1BN,EAAAA,IAAI,GAAGA,IAAI,CAACO,MAAL,CAAY,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACJ,OAAF,KAAcE,MAArB;AAAA,GAAZ,CAAP;AACH;;AACD,OAAO,SAASG,KAAT,CAAepB,KAAf,EAAsB;AACzB,MAAMqB,QAAQ,GAAG3B,KAAK,CAAC4B,MAAN,CAAa,IAAb,CAAjB;AAMA,MAAMC,MAAM,GAAG7B,KAAK,CAACgB,WAAN,CAAkB,UAACT,GAAD,EAAS;AAEtC,QAAIA,GAAJ,EAAS;AAELoB,MAAAA,QAAQ,CAACN,OAAT,GAAmBd,GAAnB;AACAW,MAAAA,SAAS,CAACX,GAAD,CAAT;AACH,KAJD,MAKK;AAEDe,MAAAA,YAAY,CAACK,QAAQ,CAACN,OAAV,CAAZ;AACH;AACJ,GAXc,EAWZ,EAXY,CAAf;AAYA,SAAQ,KAAC,cAAD;AAAgB,IAAA,UAAU,EAAE,KAA5B;AAAA,cACN,KAAC,SAAD;AAAW,MAAA,GAAG,EAAEQ;AAAhB,OAA4BvB,KAA5B;AADM,IAAR;AAGH;;AAkBD,SAASwB,MAAT,GAAkB;AACd,MAAMC,eAAe,GAAG,mBAAId,IAAJ,EAAUe,OAAV,EAAxB;;AACA,MAAMC,SAAS,GAAGF,eAAe,CAACG,IAAhB,CAAqB,UAAC3B,GAAD;AAAA,WAAS,CAAAA,GAAG,QAAH,YAAAA,GAAG,CAAEc,OAAL,MAAiB,IAA1B;AAAA,GAArB,CAAlB;;AACA,MAAI,CAACY,SAAL,EAAgB;AACZ,WAAO,IAAP;AACH;;AACD,SAAOA,SAAS,CAACZ,OAAjB;AACH;;AACDK,KAAK,CAAChB,IAAN,GAAa,UAACyB,MAAD,EAAY;AAAA;;AACrB,aAAAL,MAAM,WAAN,oBAAUpB,IAAV,CAAeyB,MAAf;AACH,CAFD;;AAGAT,KAAK,CAACf,IAAN,GAAa,UAACwB,MAAD,EAAY;AAAA;;AACrB,cAAAL,MAAM,WAAN,qBAAUnB,IAAV,CAAewB,MAAf;AACH,CAFD","sourcesContent":["import React from 'react';\nimport { LoggerProvider } from './contexts';\nimport { ToastUI } from './ToastUI';\nimport { useToast } from './useToast';\nconst ToastRoot = React.forwardRef((props, ref) => {\n    const { config, ...defaultOptions } = props;\n    const { show, hide, isVisible, options, data } = useToast({\n        defaultOptions\n    });\n    // This must use useCallback to ensure the ref doesn't get set to null and then a new ref every render.\n    React.useImperativeHandle(ref, React.useCallback(() => ({\n        show,\n        hide\n    }), [hide, show]));\n    return (<ToastUI isVisible={isVisible} options={options} data={data} hide={hide} show={show} config={config}/>);\n});\nlet refs = [];\n/**\n * Adds a ref to the end of the array, which will be used to show the toasts until its ref becomes null.\n *\n * @param newRef the new ref, which must be stable for the life of the Toast instance.\n */\nfunction addNewRef(newRef) {\n    refs.push({\n        current: newRef\n    });\n}\n/**\n * Removes the passed in ref from the file-level refs array using a strict equality check.\n *\n * @param oldRef the exact ref object to remove from the refs array.\n */\nfunction removeOldRef(oldRef) {\n    refs = refs.filter((r) => r.current !== oldRef);\n}\nexport function Toast(props) {\n    const toastRef = React.useRef(null);\n    /*\n      This must use `useCallback` to ensure the ref doesn't get set to null and then a new ref every render.\n      Failure to do so will cause whichever Toast *renders or re-renders* last to be the instance that is used,\n      rather than being the Toast that was *mounted* last.\n    */\n    const setRef = React.useCallback((ref) => {\n        // Since we know there's a ref, we'll update `refs` to use it.\n        if (ref) {\n            // store the ref in this toast instance to be able to remove it from the array later when the ref becomes null.\n            toastRef.current = ref;\n            addNewRef(ref);\n        }\n        else {\n            // remove the this toast's ref, wherever it is in the array.\n            removeOldRef(toastRef.current);\n        }\n    }, []);\n    return (<LoggerProvider enableLogs={false}>\n      <ToastRoot ref={setRef} {...props}/>\n    </LoggerProvider>);\n}\n/**\n * Get the active Toast instance `ref`, by priority.\n * The \"highest\" Toast in the `View` hierarchy has the highest priority.\n *\n * For example, a Toast inside a `Modal`, would have had its ref set later than a Toast inside App's Root.\n * Therefore, the library knows that it is currently visible on top of the App's Root\n * and will thus use the `Modal`'s Toast when showing/hiding.\n *\n * ```js\n * <>\n *  <Toast />\n *  <Modal>\n *    <Toast />\n *  </Modal>\n * </>\n * ```\n */\nfunction getRef() {\n    const reversePriority = [...refs].reverse();\n    const activeRef = reversePriority.find((ref) => ref?.current !== null);\n    if (!activeRef) {\n        return null;\n    }\n    return activeRef.current;\n}\nToast.show = (params) => {\n    getRef()?.show(params);\n};\nToast.hide = (params) => {\n    getRef()?.hide(params);\n};\n"]},"metadata":{},"sourceType":"module"}