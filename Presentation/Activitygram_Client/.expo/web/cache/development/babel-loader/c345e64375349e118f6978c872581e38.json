{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"data\", \"keyExtractor\", \"inverted\", \"horizontal\", \"placeholder\", \"placeholderImage\", \"placeholderComponent\", \"sections\", \"initialScrollIndex\", \"columnWrapperStyle\", \"renderHeader\", \"renderFooter\", \"renderSectionHeader\", \"renderItem\", \"renderSectionFooter\", \"renderScrollViewWrapper\", \"renderEmpty\", \"renderAccessory\", \"itemHeight\", \"footerHeight\", \"headerHeight\", \"sectionHeaderHeight\", \"sectionFooterHeight\", \"insetTop\", \"insetBottom\", \"actionSheetScrollRef\", \"stickySectionHeadersEnabled\", \"onEndReached\", \"onEndReachedThreshold\", \"onRefresh\", \"refreshing\", \"ListEmptyComponent\", \"ListFooterComponent\", \"ListFooterComponentStyle\", \"ListHeaderComponent\", \"ListHeaderComponentStyle\", \"hideMarginalsOnEmpty\", \"hideFooterOnEmpty\", \"hideHeaderOnEmpty\", \"ScrollViewComponent\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport BigListItem, { BigListItemType } from \"./BigListItem\";\nimport BigListPlaceholder from \"./BigListPlaceholder\";\nimport BigListProcessor from \"./BigListProcessor\";\nimport BigListSection from \"./BigListSection\";\nimport { autobind, createElement, isNumeric, mergeViewStyle, processBlock } from \"./utils\";\n\nvar BigList = function (_PureComponent) {\n  _inherits(BigList, _PureComponent);\n\n  var _super = _createSuper(BigList);\n\n  function BigList(props) {\n    var _this;\n\n    _classCallCheck(this, BigList);\n\n    _this = _super.call(this, props);\n    autobind(_assertThisInitialized(_this));\n    _this.containerHeight = 0;\n    _this.scrollTop = 0;\n    _this.scrollTopValue = _this.props.initialScrollIndex || new Animated.Value(0);\n    _this.scrollView = React.createRef();\n    _this.state = _this.getListState();\n    _this.viewableItems = [];\n    return _this;\n  }\n\n  _createClass(BigList, [{\n    key: \"getListState\",\n    value: function getListState(props, options) {\n      var stateProps = props || this.props;\n      return this.constructor.getListState(stateProps, options || processBlock({\n        containerHeight: this.containerHeight,\n        scrollTop: this.scrollTop,\n        batchSizeThreshold: stateProps.batchSizeThreshold\n      }));\n    }\n  }, {\n    key: \"getSectionLengths\",\n    value: function getSectionLengths() {\n      var _this$props = this.props,\n          sections = _this$props.sections,\n          data = _this$props.data;\n      return this.constructor.getSectionLengths(sections, data);\n    }\n  }, {\n    key: \"getItemHeight\",\n    value: function getItemHeight() {\n      var _this$props2 = this.props,\n          itemHeight = _this$props2.itemHeight,\n          getItemLayout = _this$props2.getItemLayout;\n      return this.constructor.getItemHeight(itemHeight, getItemLayout);\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible(_ref) {\n      var index = _ref.index,\n          _ref$section = _ref.section,\n          section = _ref$section === void 0 ? 0 : _ref$section;\n      var position = this.getItemOffset({\n        index: index,\n        section: section\n      });\n      return position >= this.scrollTop && position <= this.scrollTop + this.containerHeight;\n    }\n  }, {\n    key: \"getNativeScrollRef\",\n    value: function getNativeScrollRef() {\n      return this.scrollView.current;\n    }\n  }, {\n    key: \"getListProcessor\",\n    value: function getListProcessor() {\n      var scrollView = this.getNativeScrollRef();\n\n      if (scrollView != null) {\n        var _this$props3 = this.props,\n            headerHeight = _this$props3.headerHeight,\n            footerHeight = _this$props3.footerHeight,\n            sectionHeaderHeight = _this$props3.sectionHeaderHeight,\n            sectionFooterHeight = _this$props3.sectionFooterHeight,\n            insetTop = _this$props3.insetTop,\n            insetBottom = _this$props3.insetBottom,\n            numColumns = _this$props3.numColumns;\n        var itemHeight = this.getItemHeight();\n        var sectionLengths = this.getSectionLengths();\n        return new BigListProcessor({\n          sections: sectionLengths,\n          headerHeight: headerHeight,\n          footerHeight: footerHeight,\n          sectionHeaderHeight: sectionHeaderHeight,\n          sectionFooterHeight: sectionFooterHeight,\n          itemHeight: itemHeight,\n          insetTop: insetTop,\n          insetBottom: insetBottom,\n          scrollView: scrollView,\n          numColumns: numColumns\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"flashScrollIndicators\",\n    value: function flashScrollIndicators() {\n      var scrollView = this.getNativeScrollRef();\n\n      if (scrollView != null) {\n        scrollView.flashScrollIndicators();\n      }\n    }\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref2$x = _ref2.x,\n          x = _ref2$x === void 0 ? 0 : _ref2$x,\n          _ref2$y = _ref2.y,\n          y = _ref2$y === void 0 ? 0 : _ref2$y,\n          _ref2$animated = _ref2.animated,\n          animated = _ref2$animated === void 0 ? true : _ref2$animated;\n\n      var scrollView = this.getNativeScrollRef();\n\n      if (scrollView != null) {\n        scrollView.scrollTo({\n          x: x,\n          y: y,\n          animated: animated\n        });\n      }\n    }\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(_ref3) {\n      var index = _ref3.index,\n          _ref3$section = _ref3.section,\n          section = _ref3$section === void 0 ? 0 : _ref3$section,\n          _ref3$animated = _ref3.animated,\n          animated = _ref3$animated === void 0 ? true : _ref3$animated;\n      var processor = this.getListProcessor();\n\n      if (processor != null && index != null && section != null) {\n        return processor.scrollToPosition(section, index, animated);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"scrollToLocation\",\n    value: function scrollToLocation(_ref4) {\n      var itemIndex = _ref4.itemIndex,\n          sectionIndex = _ref4.sectionIndex,\n          _ref4$animated = _ref4.animated,\n          animated = _ref4$animated === void 0 ? true : _ref4$animated;\n      return this.scrollToIndex({\n        section: sectionIndex,\n        index: itemIndex,\n        animated: animated\n      });\n    }\n  }, {\n    key: \"scrollToItem\",\n    value: function scrollToItem(_ref5) {\n      var item = _ref5.item,\n          _ref5$animated = _ref5.animated,\n          animated = _ref5$animated === void 0 ? false : _ref5$animated;\n      var index;\n\n      if (this.hasSections()) {\n        var coords = JSON.stringify(this.map(function (a) {\n          return a[0] + \"|\" + a[1];\n        }));\n        index = coords.indexOf(item[0] + \"|\" + item[1]) !== -1;\n      } else {\n        index = this.props.data.indexOf(item);\n      }\n\n      return this.scrollToIndex({\n        index: index,\n        animated: animated\n      });\n    }\n  }, {\n    key: \"scrollToOffset\",\n    value: function scrollToOffset(_ref6) {\n      var offset = _ref6.offset,\n          _ref6$animated = _ref6.animated,\n          animated = _ref6$animated === void 0 ? false : _ref6$animated;\n      var scrollRef = this.getNativeScrollRef();\n\n      if (scrollRef != null) {\n        scrollRef.scrollTo({\n          x: 0,\n          y: offset,\n          animated: animated\n        });\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"scrollToTop\",\n    value: function scrollToTop() {\n      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref7$animated = _ref7.animated,\n          animated = _ref7$animated === void 0 ? true : _ref7$animated;\n\n      return this.scrollTo({\n        x: 0,\n        y: 0,\n        animated: animated\n      });\n    }\n  }, {\n    key: \"scrollToEnd\",\n    value: function scrollToEnd() {\n      var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref8$animated = _ref8.animated,\n          animated = _ref8$animated === void 0 ? true : _ref8$animated;\n\n      var data = this.props.data;\n      var section = 0;\n      var index = 0;\n\n      if (this.hasSections()) {\n        var sectionLengths = this.getSectionLengths();\n        section = sectionLengths[sectionLengths.length - 1];\n      } else {\n        index = data.length;\n      }\n\n      return this.scrollToIndex({\n        section: section,\n        index: index,\n        animated: animated\n      });\n    }\n  }, {\n    key: \"scrollToSection\",\n    value: function scrollToSection(_ref9) {\n      var section = _ref9.section,\n          _ref9$animated = _ref9.animated,\n          animated = _ref9$animated === void 0 ? true : _ref9$animated;\n      return this.scrollToIndex({\n        index: 0,\n        section: section,\n        animated: animated\n      });\n    }\n  }, {\n    key: \"onViewableItemsChanged\",\n    value: function onViewableItemsChanged() {\n      var _this2 = this;\n\n      var onViewableItemsChanged = this.props.onViewableItemsChanged;\n\n      if (onViewableItemsChanged) {\n        var prevItems = this.viewableItems;\n        var currentItems = this.state.items.map(function (_ref10) {\n          var type = _ref10.type,\n              section = _ref10.section,\n              index = _ref10.index,\n              key = _ref10.key;\n\n          if (type === BigListItemType.ITEM) {\n            return {\n              item: _this2.getItem({\n                section: section,\n                index: index\n              }),\n              section: section,\n              key: key,\n              index: (section + 1) * index,\n              isViewable: _this2.isVisible({\n                section: section,\n                index: index\n              })\n            };\n          }\n\n          return false;\n        }).filter(Boolean);\n        this.viewableItems = currentItems.filter(function (item) {\n          return item.isViewable;\n        });\n        var changed = prevItems.filter(function (_ref11) {\n          var prevIndex = _ref11.index;\n          return !_this2.viewableItems.some(function (_ref12) {\n            var nextIndex = _ref12.index;\n            return nextIndex === prevIndex;\n          });\n        }).map(function (item) {\n          item.isViewable = _this2.isVisible({\n            section: item.section,\n            index: item.index\n          });\n          return item;\n        });\n        var prevViewableItem = prevItems.length;\n        var currentViewableItem = this.viewableItems.length;\n\n        if (changed.length > 0 || prevViewableItem !== currentViewableItem) {\n          onViewableItemsChanged({\n            viewableItems: this.viewableItems,\n            changed: changed\n          });\n        }\n      }\n    }\n  }, {\n    key: \"onScroll\",\n    value: function onScroll(event) {\n      var nativeEvent = event.nativeEvent;\n      var _this$props4 = this.props,\n          contentInset = _this$props4.contentInset,\n          batchSizeThreshold = _this$props4.batchSizeThreshold,\n          onViewableItemsChanged = _this$props4.onViewableItemsChanged;\n      this.containerHeight = nativeEvent.layoutMeasurement.height - (contentInset.top || 0) - (contentInset.bottom || 0);\n      this.scrollTop = Math.min(Math.max(0, nativeEvent.contentOffset.y), nativeEvent.contentSize.height - this.containerHeight);\n      var nextState = processBlock({\n        containerHeight: this.containerHeight,\n        scrollTop: this.scrollTop,\n        batchSizeThreshold: batchSizeThreshold\n      });\n\n      if (nextState.batchSize !== this.state.batchSize || nextState.blockStart !== this.state.blockStart || nextState.blockEnd !== this.state.blockEnd) {\n        this.setState(nextState);\n      }\n\n      if (onViewableItemsChanged) {\n        this.onViewableItemsChanged();\n      }\n\n      var _this$props5 = this.props,\n          onScroll = _this$props5.onScroll,\n          onEndReached = _this$props5.onEndReached,\n          onEndReachedThreshold = _this$props5.onEndReachedThreshold;\n\n      if (onScroll != null) {\n        onScroll(event);\n      }\n\n      var layoutMeasurement = nativeEvent.layoutMeasurement,\n          contentOffset = nativeEvent.contentOffset,\n          contentSize = nativeEvent.contentSize;\n      var distanceFromEnd = contentSize.height - (layoutMeasurement.height + contentOffset.y);\n\n      if (distanceFromEnd <= layoutMeasurement.height * onEndReachedThreshold) {\n        if (!this.endReached) {\n          this.endReached = true;\n          onEndReached && onEndReached({\n            distanceFromEnd: distanceFromEnd\n          });\n        }\n      } else {\n        this.endReached = false;\n      }\n    }\n  }, {\n    key: \"onLayout\",\n    value: function onLayout(event) {\n      var nativeEvent = event.nativeEvent;\n      var _this$props6 = this.props,\n          contentInset = _this$props6.contentInset,\n          batchSizeThreshold = _this$props6.batchSizeThreshold;\n      this.containerHeight = nativeEvent.layout.height - (contentInset.top || 0) - (contentInset.bottom || 0);\n      var nextState = processBlock({\n        containerHeight: this.containerHeight,\n        scrollTop: this.scrollTop,\n        batchSizeThreshold: batchSizeThreshold\n      });\n\n      if (nextState.batchSize !== this.state.batchSize || nextState.blockStart !== this.state.blockStart || nextState.blockEnd !== this.state.blockEnd) {\n        this.setState(nextState);\n      }\n\n      var onLayout = this.props.onLayout;\n\n      if (onLayout) {\n        onLayout(event);\n      }\n    }\n  }, {\n    key: \"onScrollEnd\",\n    value: function onScrollEnd(event) {\n      var _this$props7 = this.props,\n          renderAccessory = _this$props7.renderAccessory,\n          onScrollEnd = _this$props7.onScrollEnd;\n\n      if (renderAccessory != null) {\n        this.forceUpdate();\n      }\n\n      if (onScrollEnd) {\n        onScrollEnd(event);\n      }\n    }\n  }, {\n    key: \"onMomentumScrollEnd\",\n    value: function onMomentumScrollEnd(event) {\n      var onMomentumScrollEnd = this.props.onMomentumScrollEnd;\n      this.onScrollEnd(event);\n\n      if (onMomentumScrollEnd) {\n        onMomentumScrollEnd(event);\n      }\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      var sectionLengths = this.getSectionLengths();\n      var length = sectionLengths.reduce(function (total, sectionLength) {\n        return total + sectionLength;\n      }, 0);\n      return length === 0;\n    }\n  }, {\n    key: \"hasSections\",\n    value: function hasSections() {\n      return this.props.sections !== null;\n    }\n  }, {\n    key: \"getItemOffset\",\n    value: function getItemOffset(_ref13) {\n      var _ref13$section = _ref13.section,\n          section = _ref13$section === void 0 ? 0 : _ref13$section,\n          index = _ref13.index;\n      var _this$props8 = this.props,\n          insetTop = _this$props8.insetTop,\n          headerHeight = _this$props8.headerHeight,\n          sectionHeaderHeight = _this$props8.sectionHeaderHeight,\n          sectionFooterHeight = _this$props8.sectionFooterHeight,\n          numColumns = _this$props8.numColumns,\n          itemHeight = _this$props8.itemHeight;\n      var offset = insetTop + isNumeric(headerHeight) ? Number(headerHeight) : headerHeight();\n      var sections = this.getSectionLengths();\n      var foundIndex = false;\n      var s = 0;\n\n      while (s <= section) {\n        var rows = Math.ceil(sections[s] / numColumns);\n\n        if (rows === 0) {\n          s += 1;\n          continue;\n        }\n\n        offset += isNumeric(sectionHeaderHeight) ? Number(sectionHeaderHeight) : sectionHeaderHeight(s);\n\n        if (isNumeric(itemHeight)) {\n          var uniformHeight = this.getItemHeight(section);\n\n          if (s === section) {\n            offset += uniformHeight * Math.ceil(index / numColumns);\n            foundIndex = true;\n          } else {\n            offset += uniformHeight * rows;\n          }\n        } else {\n          for (var i = 0; i < rows; i++) {\n            if (s < section || s === section && i < index) {\n              offset += itemHeight(s, Math.ceil(i / numColumns));\n            } else if (s === section && i === index) {\n              foundIndex = true;\n              break;\n            }\n          }\n        }\n\n        if (!foundIndex) {\n          offset += isNumeric(sectionFooterHeight) ? Number(sectionFooterHeight) : sectionFooterHeight(s);\n        }\n\n        s += 1;\n      }\n\n      return offset;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(_ref14) {\n      var index = _ref14.index,\n          _ref14$section = _ref14.section,\n          section = _ref14$section === void 0 ? 0 : _ref14$section;\n\n      if (this.hasSections()) {\n        return this.props.sections[section][index];\n      } else {\n        return this.props.data[index];\n      }\n    }\n  }, {\n    key: \"getItems\",\n    value: function getItems() {\n      return this.hasSections() ? this.props.sections : this.props.data;\n    }\n  }, {\n    key: \"renderItems\",\n    value: function renderItems() {\n      var _this3 = this;\n\n      var _this$props9 = this.props,\n          keyExtractor = _this$props9.keyExtractor,\n          numColumns = _this$props9.numColumns,\n          hideMarginalsOnEmpty = _this$props9.hideMarginalsOnEmpty,\n          hideHeaderOnEmpty = _this$props9.hideHeaderOnEmpty,\n          hideFooterOnEmpty = _this$props9.hideFooterOnEmpty,\n          columnWrapperStyle = _this$props9.columnWrapperStyle,\n          controlItemRender = _this$props9.controlItemRender,\n          placeholder = _this$props9.placeholder,\n          placeholderComponent = _this$props9.placeholderComponent,\n          placeholderImage = _this$props9.placeholderImage,\n          ListEmptyComponent = _this$props9.ListEmptyComponent,\n          ListFooterComponent = _this$props9.ListFooterComponent,\n          ListFooterComponentStyle = _this$props9.ListFooterComponentStyle,\n          ListHeaderComponent = _this$props9.ListHeaderComponent,\n          ListHeaderComponentStyle = _this$props9.ListHeaderComponentStyle,\n          renderHeader = _this$props9.renderHeader,\n          renderFooter = _this$props9.renderFooter,\n          renderSectionHeader = _this$props9.renderSectionHeader,\n          renderItem = _this$props9.renderItem,\n          renderSectionFooter = _this$props9.renderSectionFooter,\n          renderEmpty = _this$props9.renderEmpty;\n      var _this$state$items = this.state.items,\n          items = _this$state$items === void 0 ? [] : _this$state$items;\n      var itemStyle = this.getBaseStyle();\n      var fullItemStyle = mergeViewStyle(itemStyle, {\n        width: \"100%\"\n      });\n      var isEmptyList = this.isEmpty();\n      var emptyItem = ListEmptyComponent ? createElement(ListEmptyComponent) : renderEmpty ? renderEmpty() : null;\n\n      if (isEmptyList && emptyItem) {\n        if (hideMarginalsOnEmpty || hideHeaderOnEmpty && hideFooterOnEmpty) {\n          return emptyItem;\n        } else {\n          var headerIndex = items.findIndex(function (item) {\n            return item.type === BigListItemType.HEADER;\n          });\n          items.splice(headerIndex + 1, 0, {\n            type: BigListItemType.EMPTY,\n            key: \"empty\"\n          });\n\n          if (hideHeaderOnEmpty) {\n            items.splice(headerIndex, 1);\n          }\n\n          if (hideFooterOnEmpty) {\n            var footerIndex = items.findIndex(function (item) {\n              return item.type === BigListItemType.FOOTER;\n            });\n            items.splice(footerIndex, 1);\n          }\n        }\n      }\n\n      var sectionPositions = [];\n      items.forEach(function (_ref15) {\n        var type = _ref15.type,\n            position = _ref15.position;\n\n        if (type === BigListItemType.SECTION_HEADER) {\n          sectionPositions.push(position);\n        }\n      });\n      var children = [];\n      items.forEach(function (_ref16) {\n        var type = _ref16.type,\n            key = _ref16.key,\n            position = _ref16.position,\n            height = _ref16.height,\n            section = _ref16.section,\n            index = _ref16.index;\n        var itemKey = key || position;\n        var uniqueKey = String((section + 1) * index);\n        var child;\n        var style;\n\n        switch (type) {\n          case BigListItemType.HEADER:\n            if (ListHeaderComponent != null) {\n              child = createElement(ListHeaderComponent);\n              style = mergeViewStyle(fullItemStyle, ListHeaderComponentStyle);\n            } else {\n              child = renderHeader();\n              style = fullItemStyle;\n            }\n\n          case BigListItemType.FOOTER:\n            if (type === BigListItemType.FOOTER) {\n              if (ListFooterComponent != null) {\n                child = createElement(ListFooterComponent);\n                style = mergeViewStyle(fullItemStyle, ListFooterComponentStyle);\n              } else {\n                child = renderFooter();\n                style = fullItemStyle;\n              }\n            }\n\n          case BigListItemType.SECTION_FOOTER:\n            if (type === BigListItemType.SECTION_FOOTER) {\n              height = isEmptyList ? 0 : height;\n              child = renderSectionFooter(section);\n              style = fullItemStyle;\n            }\n\n          case BigListItemType.ITEM:\n            if (type === BigListItemType.ITEM) {\n              var item = _this3.getItem({\n                section: section,\n                index: index\n              });\n\n              uniqueKey = keyExtractor ? keyExtractor(item, uniqueKey) : uniqueKey;\n              style = numColumns > 1 ? mergeViewStyle(itemStyle, columnWrapperStyle || {}) : itemStyle;\n              var renderArguments = {\n                item: item,\n                index: index,\n                section: undefined,\n                key: undefined,\n                style: undefined\n              };\n\n              if (_this3.hasSections()) {\n                renderArguments.section = section;\n              }\n\n              if (controlItemRender) {\n                renderArguments.key = uniqueKey;\n                renderArguments.style = mergeViewStyle(style, {\n                  height: height,\n                  width: 100 / numColumns + \"%\"\n                });\n              }\n\n              child = renderItem(renderArguments);\n            }\n\n            if (child != null) {\n              children.push(type === BigListItemType.ITEM && controlItemRender ? child : React.createElement(BigListItem, {\n                key: itemKey,\n                uniqueKey: uniqueKey,\n                height: height,\n                width: 100 / numColumns + \"%\",\n                style: style\n              }, child));\n            }\n\n            break;\n\n          case BigListItemType.EMPTY:\n            children.push(React.createElement(View, {\n              key: itemKey\n            }, emptyItem));\n            break;\n\n          case BigListItemType.SPACER:\n            children.push(placeholder ? React.createElement(BigListPlaceholder, {\n              key: itemKey,\n              height: height,\n              image: placeholderImage,\n              component: placeholderComponent\n            }) : React.createElement(BigListItem, {\n              key: itemKey,\n              height: height\n            }));\n            break;\n\n          case BigListItemType.SECTION_HEADER:\n            height = isEmptyList ? 0 : height;\n            sectionPositions.shift();\n            child = renderSectionHeader(section);\n\n            if (child != null) {\n              children.push(React.createElement(BigListSection, {\n                key: itemKey,\n                style: fullItemStyle,\n                height: height,\n                position: position,\n                nextSectionPosition: sectionPositions[0],\n                scrollTopValue: _this3.scrollTopValue\n              }, child));\n            }\n\n            break;\n        }\n      });\n      return children;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var stickySectionHeadersEnabled = this.props.stickySectionHeadersEnabled;\n      var scrollView = this.getNativeScrollRef();\n\n      if (stickySectionHeadersEnabled && scrollView != null && Platform.OS !== \"web\") {\n        this.scrollTopValueAttachment = Animated.attachNativeEvent(scrollView, \"onScroll\", [{\n          nativeEvent: {\n            contentOffset: {\n              y: this.scrollTopValue\n            }\n          }\n        }]);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.initialScrollIndex !== this.props.initialScrollIndex) {\n        throw new Error(\"scrollTopValue cannot changed after mounting\");\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.scrollTopValueAttachment != null) {\n        this.scrollTopValueAttachment.detach();\n      }\n    }\n  }, {\n    key: \"getBaseStyle\",\n    value: function getBaseStyle() {\n      var _this$props10 = this.props,\n          inverted = _this$props10.inverted,\n          horizontal = _this$props10.horizontal;\n\n      if (inverted) {\n        if (horizontal) {\n          return {\n            transform: [{\n              scaleX: -1\n            }]\n          };\n        } else {\n          return {\n            transform: [{\n              scaleY: -1\n            }]\n          };\n        }\n      }\n\n      return {};\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props11 = this.props,\n          data = _this$props11.data,\n          keyExtractor = _this$props11.keyExtractor,\n          inverted = _this$props11.inverted,\n          horizontal = _this$props11.horizontal,\n          placeholder = _this$props11.placeholder,\n          placeholderImage = _this$props11.placeholderImage,\n          placeholderComponent = _this$props11.placeholderComponent,\n          sections = _this$props11.sections,\n          initialScrollIndex = _this$props11.initialScrollIndex,\n          columnWrapperStyle = _this$props11.columnWrapperStyle,\n          renderHeader = _this$props11.renderHeader,\n          renderFooter = _this$props11.renderFooter,\n          renderSectionHeader = _this$props11.renderSectionHeader,\n          renderItem = _this$props11.renderItem,\n          renderSectionFooter = _this$props11.renderSectionFooter,\n          renderScrollViewWrapper = _this$props11.renderScrollViewWrapper,\n          renderEmpty = _this$props11.renderEmpty,\n          renderAccessory = _this$props11.renderAccessory,\n          itemHeight = _this$props11.itemHeight,\n          footerHeight = _this$props11.footerHeight,\n          headerHeight = _this$props11.headerHeight,\n          sectionHeaderHeight = _this$props11.sectionHeaderHeight,\n          sectionFooterHeight = _this$props11.sectionFooterHeight,\n          insetTop = _this$props11.insetTop,\n          insetBottom = _this$props11.insetBottom,\n          actionSheetScrollRef = _this$props11.actionSheetScrollRef,\n          stickySectionHeadersEnabled = _this$props11.stickySectionHeadersEnabled,\n          onEndReached = _this$props11.onEndReached,\n          onEndReachedThreshold = _this$props11.onEndReachedThreshold,\n          onRefresh = _this$props11.onRefresh,\n          refreshing = _this$props11.refreshing,\n          ListEmptyComponent = _this$props11.ListEmptyComponent,\n          ListFooterComponent = _this$props11.ListFooterComponent,\n          ListFooterComponentStyle = _this$props11.ListFooterComponentStyle,\n          ListHeaderComponent = _this$props11.ListHeaderComponent,\n          ListHeaderComponentStyle = _this$props11.ListHeaderComponentStyle,\n          hideMarginalsOnEmpty = _this$props11.hideMarginalsOnEmpty,\n          hideFooterOnEmpty = _this$props11.hideFooterOnEmpty,\n          hideHeaderOnEmpty = _this$props11.hideHeaderOnEmpty,\n          ScrollViewComponent = _this$props11.ScrollViewComponent,\n          props = _objectWithoutProperties(_this$props11, _excluded);\n\n      var wrapper = renderScrollViewWrapper || function (val) {\n        return val;\n      };\n\n      var handleScroll = stickySectionHeadersEnabled && Platform.OS === \"web\" ? Animated.event([{\n        nativeEvent: {\n          contentOffset: {\n            y: this.scrollTopValue\n          }\n        }\n      }], {\n        listener: function listener(event) {\n          return _this4.onScroll(event);\n        },\n        useNativeDriver: false\n      }) : this.onScroll;\n      var defaultProps = {\n        refreshControl: onRefresh && !this.props.refreshControl ? React.createElement(RefreshControl, {\n          refreshing: refreshing,\n          onRefresh: onRefresh\n        }) : null,\n        contentContainerStyle: {\n          flexDirection: \"row\",\n          flexWrap: \"wrap\",\n          maxWidth: \"100%\"\n        }\n      };\n      var overwriteProps = {\n        ref: function ref(_ref17) {\n          _this4.scrollView.current = _ref17;\n\n          if (actionSheetScrollRef) {\n            actionSheetScrollRef.current = _ref17;\n          }\n        },\n        onScroll: handleScroll,\n        onLayout: this.onLayout,\n        onMomentumScrollEnd: this.onMomentumScrollEnd,\n        onScrollEndDrag: this.onScrollEnd\n      };\n\n      var scrollViewProps = _objectSpread(_objectSpread(_objectSpread({}, defaultProps), props), overwriteProps);\n\n      scrollViewProps.contentContainerStyle = mergeViewStyle(props.contentContainerStyle, defaultProps.contentContainerStyle);\n      var ListScrollView = ScrollViewComponent || ScrollView;\n      var scrollView = wrapper(React.createElement(ListScrollView, scrollViewProps, this.renderItems()));\n      var scrollStyle = mergeViewStyle({\n        flex: 1,\n        maxHeight: Platform.select({\n          web: \"100vh\",\n          default: \"100%\"\n        })\n      }, this.getBaseStyle());\n      return React.createElement(View, {\n        style: scrollStyle\n      }, scrollView, renderAccessory != null ? renderAccessory(this) : null);\n    }\n  }], [{\n    key: \"getListState\",\n    value: function getListState(_ref18, _ref19) {\n      var data = _ref18.data,\n          sections = _ref18.sections,\n          batchSizeThreshold = _ref18.batchSizeThreshold,\n          headerHeight = _ref18.headerHeight,\n          footerHeight = _ref18.footerHeight,\n          sectionHeaderHeight = _ref18.sectionHeaderHeight,\n          itemHeight = _ref18.itemHeight,\n          sectionFooterHeight = _ref18.sectionFooterHeight,\n          insetTop = _ref18.insetTop,\n          insetBottom = _ref18.insetBottom,\n          numColumns = _ref18.numColumns,\n          getItemLayout = _ref18.getItemLayout;\n      var batchSize = _ref19.batchSize,\n          blockStart = _ref19.blockStart,\n          blockEnd = _ref19.blockEnd,\n          prevItems = _ref19.items;\n\n      if (batchSize === 0) {\n        return {\n          batchSize: batchSize,\n          blockStart: blockStart,\n          blockEnd: blockEnd,\n          height: insetTop + insetBottom,\n          items: []\n        };\n      }\n\n      var self = BigList;\n      var layoutItemHeight = self.getItemHeight(itemHeight, getItemLayout);\n      var sectionLengths = self.getSectionLengths(sections, data);\n      var processor = new BigListProcessor({\n        sections: sectionLengths,\n        itemHeight: layoutItemHeight,\n        headerHeight: headerHeight,\n        footerHeight: footerHeight,\n        sectionHeaderHeight: sectionHeaderHeight,\n        sectionFooterHeight: sectionFooterHeight,\n        insetTop: insetTop,\n        insetBottom: insetBottom,\n        numColumns: numColumns\n      });\n      return _objectSpread(_objectSpread({}, {\n        batchSize: batchSize,\n        blockStart: blockStart,\n        blockEnd: blockEnd\n      }), processor.process(blockStart - batchSize, blockEnd + batchSize, prevItems || []));\n    }\n  }, {\n    key: \"getSectionLengths\",\n    value: function getSectionLengths() {\n      var sections = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (sections !== null) {\n        return sections.map(function (section) {\n          return section.length;\n        });\n      }\n\n      return [data === null || data === void 0 ? void 0 : data.length];\n    }\n  }, {\n    key: \"getItemHeight\",\n    value: function getItemHeight(itemHeight, getItemLayout) {\n      if (getItemLayout) {\n        var itemLayout = getItemLayout([], 0);\n        return itemLayout.length;\n      }\n\n      if (itemHeight) {\n        return itemHeight;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      return BigList.getListState(props, state);\n    }\n  }]);\n\n  return BigList;\n}(PureComponent);\n\nBigList.propTypes = {\n  inverted: PropTypes.bool,\n  horizontal: PropTypes.bool,\n  actionSheetScrollRef: PropTypes.any,\n  batchSizeThreshold: PropTypes.number,\n  bottom: PropTypes.number,\n  numColumns: PropTypes.number,\n  columnWrapperStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  contentInset: PropTypes.shape({\n    bottom: PropTypes.number,\n    left: PropTypes.number,\n    right: PropTypes.number,\n    top: PropTypes.number\n  }),\n  controlItemRender: PropTypes.bool,\n  data: PropTypes.array,\n  placeholder: PropTypes.bool,\n  placeholderImage: PropTypes.any,\n  placeholderComponent: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element, PropTypes.node]),\n  footerHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]),\n  getItemLayout: PropTypes.func,\n  headerHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]),\n  insetBottom: PropTypes.number,\n  insetTop: PropTypes.number,\n  itemHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]),\n  keyboardDismissMode: PropTypes.string,\n  keyboardShouldPersistTaps: PropTypes.string,\n  ListEmptyComponent: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element, PropTypes.node]),\n  ListFooterComponent: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element, PropTypes.node]),\n  ListFooterComponentStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  ListHeaderComponent: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element, PropTypes.node]),\n  ListHeaderComponentStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  onEndReached: PropTypes.func,\n  onEndReachedThreshold: PropTypes.number,\n  onLayout: PropTypes.func,\n  onRefresh: PropTypes.func,\n  onScroll: PropTypes.func,\n  onScrollEnd: PropTypes.func,\n  onViewableItemsChanged: PropTypes.func,\n  removeClippedSubviews: PropTypes.bool,\n  renderAccessory: PropTypes.func,\n  renderScrollViewWrapper: PropTypes.func,\n  renderEmpty: PropTypes.func,\n  renderFooter: PropTypes.func,\n  renderHeader: PropTypes.func,\n  renderItem: PropTypes.func.isRequired,\n  renderSectionHeader: PropTypes.func,\n  renderSectionFooter: PropTypes.func,\n  keyExtractor: PropTypes.func,\n  refreshing: PropTypes.bool,\n  scrollEventThrottle: PropTypes.number,\n  initialScrollIndex: PropTypes.number,\n  hideMarginalsOnEmpty: PropTypes.bool,\n  sectionFooterHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]),\n  sectionHeaderHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]),\n  sections: PropTypes.array,\n  stickySectionHeadersEnabled: PropTypes.bool,\n  ScrollViewComponent: PropTypes.oneOfType([PropTypes.func, PropTypes.elementType])\n};\nBigList.defaultProps = {\n  data: [],\n  inverted: false,\n  horizontal: false,\n  sections: null,\n  refreshing: false,\n  batchSizeThreshold: 1,\n  numColumns: 1,\n  placeholder: Platform.select({\n    web: false,\n    default: false\n  }),\n  renderItem: function renderItem() {\n    return null;\n  },\n  renderHeader: function renderHeader() {\n    return null;\n  },\n  renderFooter: function renderFooter() {\n    return null;\n  },\n  renderSectionHeader: function renderSectionHeader() {\n    return null;\n  },\n  renderSectionFooter: function renderSectionFooter() {\n    return null;\n  },\n  hideMarginalsOnEmpty: false,\n  hideFooterOnEmpty: false,\n  hideHeaderOnEmpty: false,\n  controlItemRender: false,\n  itemHeight: 50,\n  headerHeight: 0,\n  footerHeight: 0,\n  sectionHeaderHeight: 0,\n  sectionFooterHeight: 0,\n  stickySectionHeadersEnabled: true,\n  removeClippedSubviews: false,\n  scrollEventThrottle: Platform.OS === \"web\" ? 5 : 16,\n  keyboardShouldPersistTaps: \"always\",\n  keyboardDismissMode: \"interactive\",\n  insetTop: 0,\n  insetBottom: 0,\n  contentInset: {\n    top: 0,\n    right: 0,\n    left: 0,\n    bottom: 0\n  },\n  onEndReachedThreshold: 0,\n  ScrollViewComponent: ScrollView\n};\nexport default BigList;","map":{"version":3,"sources":["BigList.jsx"],"names":["constructor","items","processor","sections","sectionLengths","itemHeight","sectionFooterHeight","insetTop","insetBottom","numColumns","blockStart","blockEnd","getListState","stateProps","batchSizeThreshold","getSectionLengths","section","data","getItemHeight","isVisible","getNativeScrollRef","getListProcessor","props","headerHeight","footerHeight","sectionHeaderHeight","flashScrollIndicators","animated","scrollToLocation","sectionIndex","index","scrollToItem","scrollRef","x","y","offset","scrollToEnd","hasSections","scrollToSection","onViewableItemsChanged","currentItems","type","key","item","getItem","isViewable","prevIndex","prevViewableItem","prevItems","viewableItems","changed","contentInset","containerHeight","Math","processBlock","scrollTop","nextState","setState","onScroll","onEndReached","onEndReachedThreshold","contentOffset","contentSize","distanceFromEnd","nativeEvent","onLayout","onScrollEnd","renderAccessory","onMomentumScrollEnd","event","length","reduce","total","sectionLength","getDerivedStateFromProps","getItemOffset","s","foundIndex","uniformHeight","getItems","keyExtractor","hideMarginalsOnEmpty","hideHeaderOnEmpty","hideFooterOnEmpty","columnWrapperStyle","controlItemRender","ListFooterComponent","ListFooterComponentStyle","ListHeaderComponent","ListHeaderComponentStyle","renderSectionHeader","renderEmpty","itemStyle","getBaseStyle","fullItemStyle","mergeViewStyle","emptyItem","headerIndex","BigListItemType","footerIndex","sectionPositions","position","forEach","String","style","child","renderHeader","renderFooter","isEmptyList","renderSectionFooter","ITEM","uniqueKey","undefined","renderArguments","width","children","itemKey","componentDidMount","stickySectionHeadersEnabled","scrollView","componentDidUpdate","componentWillUnmount","horizontal","transform","scaleX","scaleY","placeholderImage","placeholderComponent","initialScrollIndex","renderScrollViewWrapper","onRefresh","ListEmptyComponent","ScrollViewComponent","listener","defaultProps","refreshing","contentContainerStyle","maxWidth","actionSheetScrollRef","current","handleScroll","onScrollEndDrag","scrollViewProps","ListScrollView","wrapper","scrollStyle","flex","maxHeight","default","inverted","PropTypes","bool","bottom","left","number","right","top","array","placeholder","getItemLayout","oneOfType","keyboardDismissMode","keyboardShouldPersistTaps","func","removeClippedSubviews","renderItem","scrollEventThrottle","BigList","ScrollView"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Animated,\n  Platform,\n  RefreshControl,\n  ScrollView,\n  View,\n} from \"react-native\";\n\nimport BigListItem, { BigListItemType } from \"./BigListItem\";\nimport BigListPlaceholder from \"./BigListPlaceholder\";\nimport BigListProcessor from \"./BigListProcessor\";\nimport BigListSection from \"./BigListSection\";\nimport {\n  autobind,\n  createElement,\n  isNumeric,\n  mergeViewStyle,\n  processBlock,\n} from \"./utils\";\n\nclass BigList extends PureComponent {\n  /**\n   * Constructor.\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    autobind(this);\n    // Initialize properties and state\n    this.containerHeight = 0;\n    this.scrollTop = 0;\n    this.scrollTopValue =\n      this.props.initialScrollIndex || new Animated.Value(0);\n    this.scrollView = React.createRef();\n    this.state = this.getListState();\n    this.viewableItems = [];\n  }\n\n  /**\n   * Get list state.\n   * @param {array} data\n   * @param {array[]|object|null|undefined} sections\n   * @param {array} prevItems\n   * @param {number|null} batchSizeThreshold\n   * @param {number|function|null|undefined} headerHeight\n   * @param {number|function|null|undefined} footerHeight\n   * @param {number|function|null|undefined} sectionHeaderHeight\n   * @param {number|function|null|undefined} itemHeight\n   * @param {number|function|null|undefined} sectionFooterHeight\n   * @param {number|null|undefined} insetTop\n   * @param {number|null|undefined} insetBottom\n   * @param {number|null|undefined} numColumns\n   * @param {number|null|undefined} batchSize\n   * @param {number|null|undefined} blockStart\n   * @param {number|null|undefined} blockEnd\n   * @param {function|null|undefined} getItemLayout\n   * @returns {{blockStart: *, batchSize: *, blockEnd: *, items: [], height: *}|{blockStart, batchSize, blockEnd, items: [], height: *}}\n   */\n  static getListState(\n    {\n      data,\n      sections,\n      batchSizeThreshold,\n      headerHeight,\n      footerHeight,\n      sectionHeaderHeight,\n      itemHeight,\n      sectionFooterHeight,\n      insetTop,\n      insetBottom,\n      numColumns,\n      getItemLayout,\n    },\n    { batchSize, blockStart, blockEnd, items: prevItems },\n  ) {\n    if (batchSize === 0) {\n      return {\n        batchSize,\n        blockStart,\n        blockEnd,\n        height: insetTop + insetBottom,\n        items: [],\n      };\n    }\n    const self = BigList;\n    const layoutItemHeight = self.getItemHeight(itemHeight, getItemLayout);\n    const sectionLengths = self.getSectionLengths(sections, data);\n    const processor = new BigListProcessor({\n      sections: sectionLengths,\n      itemHeight: layoutItemHeight,\n      headerHeight,\n      footerHeight,\n      sectionHeaderHeight,\n      sectionFooterHeight,\n      insetTop,\n      insetBottom,\n      numColumns,\n    });\n    return {\n      ...{\n        batchSize,\n        blockStart,\n        blockEnd,\n      },\n      ...processor.process(\n        blockStart - batchSize,\n        blockEnd + batchSize,\n        prevItems || [],\n      ),\n    };\n  }\n\n  /**\n   * Get list state\n   * @param {object} props\n   * @param {object} options.\n   * @return {{blockStart: *, batchSize: *, blockEnd: *, items: *[], height: *}|{blockStart, batchSize, blockEnd, items: *[], height: *}}\n   */\n  getListState(props, options) {\n    const stateProps = props || this.props;\n    return this.constructor.getListState(\n      stateProps,\n      options ||\n        processBlock({\n          containerHeight: this.containerHeight,\n          scrollTop: this.scrollTop,\n          batchSizeThreshold: stateProps.batchSizeThreshold,\n        }),\n    );\n  }\n\n  /**\n   * Get sections item lengths.\n   * @param {array[]|object<string, object>|null|undefined} sections\n   * @param {array} data\n   * @returns {int[]}\n   */\n  static getSectionLengths(sections = null, data = null) {\n    if (sections !== null) {\n      return sections.map((section) => {\n        return section.length;\n      });\n    }\n    return [data?.length];\n  }\n\n  /**\n   * Get sections item lengths.\n   * @returns {int[]}\n   */\n  getSectionLengths() {\n    const { sections, data } = this.props;\n    return this.constructor.getSectionLengths(sections, data);\n  }\n\n  /**\n   * Get item height.\n   * @param {number} itemHeight\n   * @param {function|null|undefined} getItemLayout\n   * @return {null|*}\n   */\n  static getItemHeight(itemHeight, getItemLayout) {\n    if (getItemLayout) {\n      const itemLayout = getItemLayout([], 0);\n      return itemLayout.length;\n    }\n    if (itemHeight) {\n      return itemHeight;\n    }\n    return null;\n  }\n\n  /**\n   * Get item height.\n   * @return {null|*}\n   */\n  getItemHeight() {\n    const { itemHeight, getItemLayout } = this.props;\n    return this.constructor.getItemHeight(itemHeight, getItemLayout);\n  }\n\n  /**\n   * Is item visible.\n   * @param {int} index\n   * @param {int} section\n   * @returns {boolean}\n   */\n  isVisible({ index, section = 0 }) {\n    const position = this.getItemOffset({ index, section });\n    return (\n      position >= this.scrollTop &&\n      position <= this.scrollTop + this.containerHeight\n    );\n  }\n\n  /**\n   * Provides a reference to the underlying scroll component.\n   * @returns {ScrollView|null}\n   */\n  getNativeScrollRef() {\n    return this.scrollView.current;\n  }\n\n  /**\n   * Get list processor,\n   * @returns {BigListProcessor}\n   */\n  getListProcessor() {\n    const scrollView = this.getNativeScrollRef();\n    if (scrollView != null) {\n      const {\n        headerHeight,\n        footerHeight,\n        sectionHeaderHeight,\n        sectionFooterHeight,\n        insetTop,\n        insetBottom,\n        numColumns,\n      } = this.props;\n      const itemHeight = this.getItemHeight();\n      const sectionLengths = this.getSectionLengths();\n      return new BigListProcessor({\n        sections: sectionLengths,\n        headerHeight,\n        footerHeight,\n        sectionHeaderHeight,\n        sectionFooterHeight,\n        itemHeight,\n        insetTop,\n        insetBottom,\n        scrollView,\n        numColumns,\n      });\n    }\n    return null;\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   */\n  flashScrollIndicators() {\n    const scrollView = this.getNativeScrollRef();\n    if (scrollView != null) {\n      scrollView.flashScrollIndicators();\n    }\n  }\n\n  /**\n   * Scrolls to a given x, y offset, either immediately, with a smooth animation.\n   * @param {int} x\n   * @param {int} y\n   * @param {bool} animated\n   */\n  scrollTo({ x = 0, y = 0, animated = true } = {}) {\n    const scrollView = this.getNativeScrollRef();\n    if (scrollView != null) {\n      scrollView.scrollTo({\n        x: x,\n        y: y,\n        animated,\n      });\n    }\n  }\n\n  /**\n   * Scroll to index.\n   * @param {int} index\n   * @param {int} section\n   * @param {bool} animated\n   * @returns {bool}\n   */\n  scrollToIndex({ index, section = 0, animated = true }) {\n    const processor = this.getListProcessor();\n    if (processor != null && index != null && section != null) {\n      return processor.scrollToPosition(section, index, animated);\n    }\n    return false;\n  }\n\n  /**\n   * Alias to scrollToIndex with polyfill for SectionList.\n   * @see scrollToIndex\n   * @param {int} itemIndex\n   * @param {int} sectionIndex\n   * @param {bool} animated\n   * @returns {bool}\n   */\n  scrollToLocation({ itemIndex, sectionIndex, animated = true }) {\n    return this.scrollToIndex({\n      section: sectionIndex,\n      index: itemIndex,\n      animated,\n    });\n  }\n\n  /**\n   * Scroll to item.\n   * @param {object} item\n   * @param {bool} animated\n   * @returns {bool}\n   */\n  scrollToItem({ item, animated = false }) {\n    let index;\n    if (this.hasSections()) {\n      const coords = JSON.stringify(\n        this.map((a) => {\n          return a[0] + \"|\" + a[1];\n        }),\n      );\n      index = coords.indexOf(item[0] + \"|\" + item[1]) !== -1;\n    } else {\n      index = this.props.data.indexOf(item);\n    }\n    return this.scrollToIndex({ index, animated });\n  }\n\n  /**\n   * Scroll to offset.\n   * @param {number} offset\n   * @param {bool} animated\n   * @returns {bool}\n   */\n  scrollToOffset({ offset, animated = false }) {\n    const scrollRef = this.getNativeScrollRef();\n    if (scrollRef != null) {\n      scrollRef.scrollTo({\n        x: 0,\n        y: offset,\n        animated,\n      });\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Scroll to top.\n   * @param {bool} animated\n   * @returns {bool}\n   */\n  scrollToTop({ animated = true } = {}) {\n    return this.scrollTo({ x: 0, y: 0, animated });\n  }\n\n  /**\n   * Scroll to end.\n   * @param {bool} animated\n   * @returns {bool}\n   */\n  scrollToEnd({ animated = true } = {}) {\n    const { data } = this.props;\n    let section = 0;\n    let index = 0;\n    if (this.hasSections()) {\n      const sectionLengths = this.getSectionLengths();\n      section = sectionLengths[sectionLengths.length - 1];\n    } else {\n      index = data.length;\n    }\n    return this.scrollToIndex({ section, index, animated });\n  }\n\n  /**\n   * Scroll to section.\n   * @param {int} section\n   * @param {bool} animated\n   * @returns {bool}\n   */\n  scrollToSection({ section, animated = true }) {\n    return this.scrollToIndex({ index: 0, section, animated });\n  }\n\n  /**\n   * On viewable items changed.\n   */\n  onViewableItemsChanged() {\n    const { onViewableItemsChanged } = this.props;\n    if (onViewableItemsChanged) {\n      const prevItems = this.viewableItems;\n      const currentItems = this.state.items\n        .map(({ type, section, index, key }) => {\n          if (type === BigListItemType.ITEM) {\n            return {\n              item: this.getItem({ section, index }),\n              section: section,\n              key: key,\n              index: (section + 1) * index,\n              isViewable: this.isVisible({ section, index }),\n            };\n          }\n          return false;\n        })\n        .filter(Boolean);\n      this.viewableItems = currentItems.filter((item) => item.isViewable);\n      const changed = prevItems\n        .filter(\n          ({ index: prevIndex }) =>\n            !this.viewableItems.some(\n              ({ index: nextIndex }) => nextIndex === prevIndex,\n            ),\n        )\n        .map((item) => {\n          item.isViewable = this.isVisible({\n            section: item.section,\n            index: item.index,\n          });\n          return item;\n        });\n\n      const prevViewableItem = prevItems.length;\n      const currentViewableItem = this.viewableItems.length;\n\n      if (changed.length > 0 || prevViewableItem !== currentViewableItem) {\n        onViewableItemsChanged({ viewableItems: this.viewableItems, changed });\n      }\n    }\n  }\n\n  /**\n   * Handle scroll.\n   * @param event\n   */\n  onScroll(event) {\n    const { nativeEvent } = event;\n    const { contentInset, batchSizeThreshold, onViewableItemsChanged } =\n      this.props;\n    this.containerHeight =\n      nativeEvent.layoutMeasurement.height -\n      (contentInset.top || 0) -\n      (contentInset.bottom || 0);\n    this.scrollTop = Math.min(\n      Math.max(0, nativeEvent.contentOffset.y),\n      nativeEvent.contentSize.height - this.containerHeight,\n    );\n\n    const nextState = processBlock({\n      containerHeight: this.containerHeight,\n      scrollTop: this.scrollTop,\n      batchSizeThreshold,\n    });\n\n    if (\n      nextState.batchSize !== this.state.batchSize ||\n      nextState.blockStart !== this.state.blockStart ||\n      nextState.blockEnd !== this.state.blockEnd\n    ) {\n      this.setState(nextState);\n    }\n\n    if (onViewableItemsChanged) {\n      this.onViewableItemsChanged();\n    }\n\n    const { onScroll, onEndReached, onEndReachedThreshold } = this.props;\n    if (onScroll != null) {\n      onScroll(event);\n    }\n    const { layoutMeasurement, contentOffset, contentSize } = nativeEvent;\n    const distanceFromEnd =\n      contentSize.height - (layoutMeasurement.height + contentOffset.y);\n    if (distanceFromEnd <= layoutMeasurement.height * onEndReachedThreshold) {\n      if (!this.endReached) {\n        this.endReached = true;\n        onEndReached && onEndReached({ distanceFromEnd });\n      }\n    } else {\n      this.endReached = false;\n    }\n  }\n\n  /**\n   * Handle layout.\n   * @param event\n   */\n  onLayout(event) {\n    const { nativeEvent } = event;\n    const { contentInset, batchSizeThreshold } = this.props;\n    this.containerHeight =\n      nativeEvent.layout.height -\n      (contentInset.top || 0) -\n      (contentInset.bottom || 0);\n    const nextState = processBlock({\n      containerHeight: this.containerHeight,\n      scrollTop: this.scrollTop,\n      batchSizeThreshold,\n    });\n    if (\n      nextState.batchSize !== this.state.batchSize ||\n      nextState.blockStart !== this.state.blockStart ||\n      nextState.blockEnd !== this.state.blockEnd\n    ) {\n      this.setState(nextState);\n    }\n    const { onLayout } = this.props;\n    if (onLayout) {\n      onLayout(event);\n    }\n  }\n\n  /**\n   * Handle scroll end.\n   * @param event\n   */\n  onScrollEnd(event) {\n    const { renderAccessory, onScrollEnd } = this.props;\n    if (renderAccessory != null) {\n      this.forceUpdate();\n    }\n    if (onScrollEnd) {\n      onScrollEnd(event);\n    }\n  }\n\n  /**\n   * Handle scroll end.\n   * @param event\n   */\n  onMomentumScrollEnd(event) {\n    const { onMomentumScrollEnd } = this.props;\n    this.onScrollEnd(event);\n    if (onMomentumScrollEnd) {\n      onMomentumScrollEnd(event);\n    }\n  }\n\n  /**\n   * Is empty\n   * @returns {boolean}\n   */\n  isEmpty() {\n    const sectionLengths = this.getSectionLengths();\n    const length = sectionLengths.reduce((total, sectionLength) => {\n      return total + sectionLength;\n    }, 0);\n    return length === 0;\n  }\n\n  /**\n   * Get derived state.\n   * @param props\n   * @param state\n   * @returns {{blockStart: *, batchSize: *, blockEnd: *, items: *[], height: *}|{blockStart, batchSize, blockEnd, items: *[], height: *}}\n   */\n  static getDerivedStateFromProps(props, state) {\n    return BigList.getListState(props, state);\n  }\n\n  /**\n   * Has sections.\n   * @returns {boolean}\n   */\n  hasSections() {\n    return this.props.sections !== null;\n  }\n\n  /**\n   * Get item scroll view offset.\n   * @param {int} section\n   * @param {int} index\n   * @returns {*}\n   */\n  getItemOffset({ section = 0, index }) {\n    const {\n      insetTop,\n      headerHeight,\n      sectionHeaderHeight,\n      sectionFooterHeight,\n      numColumns,\n      itemHeight,\n    } = this.props;\n\n    // Header + inset\n    let offset =\n      insetTop + isNumeric(headerHeight)\n        ? Number(headerHeight)\n        : headerHeight();\n\n    const sections = this.getSectionLengths();\n    let foundIndex = false;\n    let s = 0;\n\n    while (s <= section) {\n      const rows = Math.ceil(sections[s] / numColumns);\n      if (rows === 0) {\n        s += 1;\n        continue;\n      }\n\n      // Section header\n      offset += isNumeric(sectionHeaderHeight)\n        ? Number(sectionHeaderHeight)\n        : sectionHeaderHeight(s);\n\n      // Items\n      if (isNumeric(itemHeight)) {\n        const uniformHeight = this.getItemHeight(section);\n        if (s === section) {\n          offset += uniformHeight * Math.ceil(index / numColumns);\n          foundIndex = true;\n        } else {\n          offset += uniformHeight * rows;\n        }\n      } else {\n        for (let i = 0; i < rows; i++) {\n          if (s < section || (s === section && i < index)) {\n            offset += itemHeight(s, Math.ceil(i / numColumns));\n          } else if (s === section && i === index) {\n            foundIndex = true;\n            break;\n          }\n        }\n      }\n\n      // Section footer\n      if (!foundIndex) {\n        offset += isNumeric(sectionFooterHeight)\n          ? Number(sectionFooterHeight)\n          : sectionFooterHeight(s);\n      }\n      s += 1;\n    }\n\n    return offset;\n  }\n\n  /**\n   * Get item data.\n   * @param {int} section\n   * @param {int} index\n   * @returns {*}\n   */\n  getItem({ index, section = 0 }) {\n    if (this.hasSections()) {\n      return this.props.sections[section][index];\n    } else {\n      return this.props.data[index];\n    }\n  }\n\n  /**\n   * Get items data.\n   * @returns {*}\n   */\n  getItems() {\n    return this.hasSections() ? this.props.sections : this.props.data;\n  }\n\n  /**\n   * Render all list items.\n   * @returns {[]|*}\n   */\n  renderItems() {\n    const {\n      keyExtractor,\n      numColumns,\n      hideMarginalsOnEmpty,\n      hideHeaderOnEmpty,\n      hideFooterOnEmpty,\n      columnWrapperStyle,\n      controlItemRender,\n      placeholder,\n      placeholderComponent,\n      placeholderImage,\n      ListEmptyComponent,\n      ListFooterComponent,\n      ListFooterComponentStyle,\n      ListHeaderComponent,\n      ListHeaderComponentStyle,\n      renderHeader,\n      renderFooter,\n      renderSectionHeader,\n      renderItem,\n      renderSectionFooter,\n      renderEmpty,\n    } = this.props;\n    const { items = [] } = this.state;\n\n    const itemStyle = this.getBaseStyle();\n    const fullItemStyle = mergeViewStyle(itemStyle, {\n      width: \"100%\",\n    });\n\n    // On empty list\n    const isEmptyList = this.isEmpty();\n    const emptyItem = ListEmptyComponent\n      ? createElement(ListEmptyComponent)\n      : renderEmpty\n      ? renderEmpty()\n      : null;\n    if (isEmptyList && emptyItem) {\n      if (hideMarginalsOnEmpty || (hideHeaderOnEmpty && hideFooterOnEmpty)) {\n        // Render empty\n        return emptyItem;\n      } else {\n        // Add empty item\n        const headerIndex = items.findIndex(\n          (item) => item.type === BigListItemType.HEADER,\n        );\n        items.splice(headerIndex + 1, 0, {\n          type: BigListItemType.EMPTY,\n          key: \"empty\",\n        });\n        if (hideHeaderOnEmpty) {\n          // Hide header\n          items.splice(headerIndex, 1);\n        }\n        if (hideFooterOnEmpty) {\n          // Hide footer\n          const footerIndex = items.findIndex(\n            (item) => item.type === BigListItemType.FOOTER,\n          );\n          items.splice(footerIndex, 1);\n        }\n      }\n    }\n\n    // Sections positions\n    const sectionPositions = [];\n    items.forEach(({ type, position }) => {\n      if (type === BigListItemType.SECTION_HEADER) {\n        sectionPositions.push(position);\n      }\n    });\n\n    // Render items\n    const children = [];\n    items.forEach(({ type, key, position, height, section, index }) => {\n      const itemKey = key || position; // Fallback fix\n      let uniqueKey = String((section + 1) * index);\n      let child;\n      let style;\n      switch (type) {\n        case BigListItemType.HEADER:\n          if (ListHeaderComponent != null) {\n            child = createElement(ListHeaderComponent);\n            style = mergeViewStyle(fullItemStyle, ListHeaderComponentStyle);\n          } else {\n            child = renderHeader();\n            style = fullItemStyle;\n          }\n        // falls through\n        case BigListItemType.FOOTER:\n          if (type === BigListItemType.FOOTER) {\n            if (ListFooterComponent != null) {\n              child = createElement(ListFooterComponent);\n              style = mergeViewStyle(fullItemStyle, ListFooterComponentStyle);\n            } else {\n              child = renderFooter();\n              style = fullItemStyle;\n            }\n          }\n        // falls through\n        case BigListItemType.SECTION_FOOTER:\n          if (type === BigListItemType.SECTION_FOOTER) {\n            height = isEmptyList ? 0 : height; // Hide section footer on empty\n            child = renderSectionFooter(section);\n            style = fullItemStyle;\n          }\n        // falls through\n        case BigListItemType.ITEM:\n          if (type === BigListItemType.ITEM) {\n            const item = this.getItem({ section, index });\n            uniqueKey = keyExtractor\n              ? keyExtractor(item, uniqueKey)\n              : uniqueKey;\n            style =\n              numColumns > 1\n                ? mergeViewStyle(itemStyle, columnWrapperStyle || {})\n                : itemStyle;\n\n            const renderArguments = {\n              item,\n              index,\n              section: undefined,\n              key: undefined,\n              style: undefined,\n            };\n\n            if (this.hasSections()) {\n              renderArguments.section = section;\n            }\n            if (controlItemRender) {\n              renderArguments.key = uniqueKey;\n              renderArguments.style = mergeViewStyle(style, {\n                height,\n                width: 100 / numColumns + \"%\",\n              });\n            }\n            child = renderItem(renderArguments);\n          }\n          if (child != null) {\n            children.push(\n              type === BigListItemType.ITEM && controlItemRender ? (\n                child\n              ) : (\n                <BigListItem\n                  key={itemKey}\n                  uniqueKey={uniqueKey}\n                  height={height}\n                  width={100 / numColumns + \"%\"}\n                  style={style}\n                >\n                  {child}\n                </BigListItem>\n              ),\n            );\n          }\n          break;\n        case BigListItemType.EMPTY:\n          children.push(<View key={itemKey}>{emptyItem}</View>);\n          break;\n        case BigListItemType.SPACER:\n          children.push(\n            placeholder ? (\n              <BigListPlaceholder\n                key={itemKey}\n                height={height}\n                image={placeholderImage}\n                component={placeholderComponent}\n              />\n            ) : (\n              <BigListItem key={itemKey} height={height} />\n            ),\n          );\n          break;\n        case BigListItemType.SECTION_HEADER:\n          height = isEmptyList ? 0 : height; // Hide section header on empty\n          sectionPositions.shift();\n          child = renderSectionHeader(section);\n          if (child != null) {\n            children.push(\n              <BigListSection\n                key={itemKey}\n                style={fullItemStyle}\n                height={height}\n                position={position}\n                nextSectionPosition={sectionPositions[0]}\n                scrollTopValue={this.scrollTopValue}\n              >\n                {child}\n              </BigListSection>,\n            );\n          }\n          break;\n      }\n    });\n    return children;\n  }\n\n  /**\n   * Component did mount.\n   */\n  componentDidMount() {\n    const { stickySectionHeadersEnabled } = this.props;\n    const scrollView = this.getNativeScrollRef();\n    if (\n      stickySectionHeadersEnabled &&\n      scrollView != null &&\n      Platform.OS !== \"web\"\n    ) {\n      // Disabled on web\n      this.scrollTopValueAttachment = Animated.attachNativeEvent(\n        scrollView,\n        \"onScroll\",\n        [{ nativeEvent: { contentOffset: { y: this.scrollTopValue } } }],\n      );\n    }\n  }\n\n  /**\n   * Component did update.\n   * @param prevProps\n   */\n  componentDidUpdate(prevProps) {\n    if (prevProps.initialScrollIndex !== this.props.initialScrollIndex) {\n      throw new Error(\"scrollTopValue cannot changed after mounting\");\n    }\n  }\n\n  /**\n   * Component will unmount.\n   */\n  componentWillUnmount() {\n    if (this.scrollTopValueAttachment != null) {\n      this.scrollTopValueAttachment.detach();\n    }\n  }\n\n  /**\n   * Get base style.\n   * @return {{transform: [{scaleX: number}]}|{transform: [{scaleY: number}]}}\n   */\n  getBaseStyle() {\n    const { inverted, horizontal } = this.props;\n    if (inverted) {\n      if (horizontal) {\n        return {\n          transform: [{ scaleX: -1 }],\n        };\n      } else {\n        return {\n          transform: [{ scaleY: -1 }],\n        };\n      }\n    }\n    return {};\n  }\n\n  /**\n   * Render.\n   * @returns {JSX.Element}\n   */\n  render() {\n    // Reduce list properties\n    const {\n      data,\n      keyExtractor,\n      inverted,\n      horizontal, // Disabled\n      placeholder,\n      placeholderImage,\n      placeholderComponent,\n      sections,\n      initialScrollIndex,\n      columnWrapperStyle,\n      renderHeader,\n      renderFooter,\n      renderSectionHeader,\n      renderItem,\n      renderSectionFooter,\n      renderScrollViewWrapper,\n      renderEmpty,\n      renderAccessory,\n      itemHeight,\n      footerHeight,\n      headerHeight,\n      sectionHeaderHeight,\n      sectionFooterHeight,\n      insetTop,\n      insetBottom,\n      actionSheetScrollRef,\n      stickySectionHeadersEnabled,\n      onEndReached,\n      onEndReachedThreshold,\n      onRefresh,\n      refreshing,\n      ListEmptyComponent,\n      ListFooterComponent,\n      ListFooterComponentStyle,\n      ListHeaderComponent,\n      ListHeaderComponentStyle,\n      hideMarginalsOnEmpty,\n      hideFooterOnEmpty,\n      hideHeaderOnEmpty,\n      ScrollViewComponent,\n      ...props\n    } = this.props;\n\n    const wrapper = renderScrollViewWrapper || ((val) => val);\n    const handleScroll =\n      stickySectionHeadersEnabled && Platform.OS === \"web\"\n        ? Animated.event(\n            [{ nativeEvent: { contentOffset: { y: this.scrollTopValue } } }],\n            {\n              listener: (event) => this.onScroll(event),\n              useNativeDriver: false,\n            },\n          )\n        : this.onScroll;\n\n    const defaultProps = {\n      refreshControl:\n        onRefresh && !this.props.refreshControl ? (\n          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n        ) : null,\n      contentContainerStyle: {\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        maxWidth: \"100%\",\n      },\n    };\n\n    const overwriteProps = {\n      ref: (ref) => {\n        this.scrollView.current = ref;\n        if (actionSheetScrollRef) {\n          actionSheetScrollRef.current = ref;\n        }\n      },\n      onScroll: handleScroll,\n      onLayout: this.onLayout,\n      onMomentumScrollEnd: this.onMomentumScrollEnd,\n      onScrollEndDrag: this.onScrollEnd,\n    };\n\n    const scrollViewProps = {\n      ...defaultProps,\n      ...props,\n      ...overwriteProps,\n    };\n\n    // Content container style merge\n    scrollViewProps.contentContainerStyle = mergeViewStyle(\n      props.contentContainerStyle,\n      defaultProps.contentContainerStyle,\n    );\n\n    const ListScrollView = ScrollViewComponent || ScrollView;\n\n    const scrollView = wrapper(\n      <ListScrollView {...scrollViewProps}>\n        {this.renderItems()}\n      </ListScrollView>,\n    );\n\n    const scrollStyle = mergeViewStyle(\n      {\n        flex: 1,\n        maxHeight: Platform.select({ web: \"100vh\", default: \"100%\" }),\n      },\n      this.getBaseStyle(),\n    );\n\n    return (\n      <View style={scrollStyle}>\n        {scrollView}\n        {renderAccessory != null ? renderAccessory(this) : null}\n      </View>\n    );\n  }\n}\n\nBigList.propTypes = {\n  inverted: PropTypes.bool,\n  horizontal: PropTypes.bool,\n  actionSheetScrollRef: PropTypes.any,\n  batchSizeThreshold: PropTypes.number,\n  bottom: PropTypes.number,\n  numColumns: PropTypes.number,\n  columnWrapperStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  contentInset: PropTypes.shape({\n    bottom: PropTypes.number,\n    left: PropTypes.number,\n    right: PropTypes.number,\n    top: PropTypes.number,\n  }),\n  controlItemRender: PropTypes.bool,\n  data: PropTypes.array,\n  placeholder: PropTypes.bool,\n  placeholderImage: PropTypes.any,\n  placeholderComponent: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.element,\n    PropTypes.node,\n  ]),\n  footerHeight: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.func,\n  ]),\n  getItemLayout: PropTypes.func,\n  headerHeight: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.func,\n  ]),\n  insetBottom: PropTypes.number,\n  insetTop: PropTypes.number,\n  itemHeight: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.func,\n  ]),\n  keyboardDismissMode: PropTypes.string,\n  keyboardShouldPersistTaps: PropTypes.string,\n  ListEmptyComponent: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.element,\n    PropTypes.node,\n  ]),\n  ListFooterComponent: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.element,\n    PropTypes.node,\n  ]),\n  ListFooterComponentStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  ListHeaderComponent: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.element,\n    PropTypes.node,\n  ]),\n  ListHeaderComponentStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  onEndReached: PropTypes.func,\n  onEndReachedThreshold: PropTypes.number,\n  onLayout: PropTypes.func,\n  onRefresh: PropTypes.func,\n  onScroll: PropTypes.func,\n  onScrollEnd: PropTypes.func,\n  onViewableItemsChanged: PropTypes.func,\n  removeClippedSubviews: PropTypes.bool,\n  renderAccessory: PropTypes.func,\n  renderScrollViewWrapper: PropTypes.func,\n  renderEmpty: PropTypes.func,\n  renderFooter: PropTypes.func,\n  renderHeader: PropTypes.func,\n  renderItem: PropTypes.func.isRequired,\n  renderSectionHeader: PropTypes.func,\n  renderSectionFooter: PropTypes.func,\n  keyExtractor: PropTypes.func,\n  refreshing: PropTypes.bool,\n  scrollEventThrottle: PropTypes.number,\n  initialScrollIndex: PropTypes.number,\n  hideMarginalsOnEmpty: PropTypes.bool,\n  sectionFooterHeight: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.func,\n  ]),\n  sectionHeaderHeight: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.func,\n  ]),\n  sections: PropTypes.array,\n  stickySectionHeadersEnabled: PropTypes.bool,\n  ScrollViewComponent: PropTypes.oneOfType([PropTypes.func, PropTypes.elementType]),\n};\n\nBigList.defaultProps = {\n  // Data\n  data: [],\n  inverted: false,\n  horizontal: false,\n  sections: null,\n  refreshing: false,\n  batchSizeThreshold: 1,\n  numColumns: 1,\n  placeholder: Platform.select({\n    web: false,\n    default: false /* TODO: default disabled until a solution for different screen sizes is found */,\n  }),\n  // Renders\n  renderItem: () => null,\n  renderHeader: () => null,\n  renderFooter: () => null,\n  renderSectionHeader: () => null,\n  renderSectionFooter: () => null,\n  hideMarginalsOnEmpty: false,\n  hideFooterOnEmpty: false,\n  hideHeaderOnEmpty: false,\n  controlItemRender: false,\n  // Height\n  itemHeight: 50,\n  headerHeight: 0,\n  footerHeight: 0,\n  sectionHeaderHeight: 0,\n  sectionFooterHeight: 0,\n  // Scroll\n  stickySectionHeadersEnabled: true,\n  removeClippedSubviews: false,\n  scrollEventThrottle: Platform.OS === \"web\" ? 5 : 16,\n  // Keyboard\n  keyboardShouldPersistTaps: \"always\",\n  keyboardDismissMode: \"interactive\",\n  // Insets\n  insetTop: 0,\n  insetBottom: 0,\n  contentInset: { top: 0, right: 0, left: 0, bottom: 0 },\n  onEndReachedThreshold: 0,\n  ScrollViewComponent: ScrollView,\n};\n\nexport default BigList;\n"]},"metadata":{},"sourceType":"module"}