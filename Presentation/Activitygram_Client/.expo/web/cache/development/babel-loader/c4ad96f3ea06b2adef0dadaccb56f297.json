{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport i18n from 'i18n-js';\nimport * as Localization from 'expo-localization';\nimport Storage from '@react-native-async-storage/async-storage';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport translations from \"../constants/translations/\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var TranslationContext = React.createContext({});\nexport var TranslationProvider = function TranslationProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState('en'),\n      _useState2 = _slicedToArray(_useState, 2),\n      locale = _useState2[0],\n      setLocale = _useState2[1];\n\n  i18n.locale = locale;\n  i18n.translations = translations;\n  i18n.fallbacks = true;\n  var t = useCallback(function (scope, options) {\n    return i18n.t(scope, _objectSpread(_objectSpread({}, options), {}, {\n      locale: locale\n    }));\n  }, [locale]);\n  var getLocale = useCallback(function _callee() {\n    var localeJSON;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Storage.getItem('locale'));\n\n          case 2:\n            localeJSON = _context.sent;\n            setLocale(localeJSON !== null ? localeJSON : Localization.locale);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [setLocale]);\n  useEffect(function () {\n    getLocale();\n  }, [getLocale]);\n  useEffect(function () {\n    Storage.setItem('locale', locale);\n  }, [locale]);\n  var contextValue = {\n    t: t,\n    locale: locale,\n    setLocale: setLocale,\n    translate: t\n  };\n  return _jsx(TranslationContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n};\nexport var useTranslation = function useTranslation() {\n  return useContext(TranslationContext);\n};","map":{"version":3,"sources":["C:/Users/shirz/Documents/GitHub/Activitygram/Presentation/Activitygram_Client/src/hooks/useTranslation.tsx"],"names":["i18n","Localization","Storage","React","useCallback","useContext","useEffect","useState","translations","TranslationContext","createContext","TranslationProvider","children","locale","setLocale","fallbacks","t","scope","options","getLocale","getItem","localeJSON","setItem","contextValue","translate","useTranslation"],"mappings":";;;;;;;;AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAO,KAAKC,YAAZ,MAA8B,mBAA9B;AACA,OAAOC,OAAP,MAAoB,2CAApB;AACA,OAAOC,KAAP,IAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAmDC,QAAnD,QAAkE,OAAlE;AAEA,OAAOC,YAAP;;AAGA,OAAO,IAAMC,kBAAkB,GAAGN,KAAK,CAACO,aAAN,CAAoB,EAApB,CAA3B;AAEP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAI7B;AAAA,MAHJC,QAGI,QAHJA,QAGI;;AACJ,kBAA4BL,QAAQ,CAAC,IAAD,CAApC;AAAA;AAAA,MAAOM,MAAP;AAAA,MAAeC,SAAf;;AAGAd,EAAAA,IAAI,CAACa,MAAL,GAAcA,MAAd;AAEAb,EAAAA,IAAI,CAACQ,YAAL,GAAoBA,YAApB;AAEAR,EAAAA,IAAI,CAACe,SAAL,GAAiB,IAAjB;AAEA,MAAMC,CAAC,GAAGZ,WAAW,CACnB,UAACa,KAAD,EAAoBC,OAApB,EAAwD;AACtD,WAAOlB,IAAI,CAACgB,CAAL,CAAOC,KAAP,kCAAkBC,OAAlB;AAA2BL,MAAAA,MAAM,EAANA;AAA3B,OAAP;AACD,GAHkB,EAInB,CAACA,MAAD,CAJmB,CAArB;AAQA,MAAMM,SAAS,GAAGf,WAAW,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEHF,OAAO,CAACkB,OAAR,CAAgB,QAAhB,CAFG;;AAAA;AAEtBC,YAAAA,UAFsB;AAK5BP,YAAAA,SAAS,CAACO,UAAU,KAAK,IAAf,GAAsBA,UAAtB,GAAmCpB,YAAY,CAACY,MAAjD,CAAT;;AAL4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,EAM1B,CAACC,SAAD,CAN0B,CAA7B;AAQAR,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;AAIAb,EAAAA,SAAS,CAAC,YAAM;AAEdJ,IAAAA,OAAO,CAACoB,OAAR,CAAgB,QAAhB,EAA0BT,MAA1B;AACD,GAHQ,EAGN,CAACA,MAAD,CAHM,CAAT;AAKA,MAAMU,YAAY,GAAG;AACnBP,IAAAA,CAAC,EAADA,CADmB;AAEnBH,IAAAA,MAAM,EAANA,MAFmB;AAGnBC,IAAAA,SAAS,EAATA,SAHmB;AAInBU,IAAAA,SAAS,EAAER;AAJQ,GAArB;AAOA,SACE,KAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEO,YAApC;AAAA,cACGX;AADH,IADF;AAKD,CAnDM;AAyDP,OAAO,IAAMa,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAC5BpB,UAAU,CAACI,kBAAD,CADkB;AAAA,CAAvB","sourcesContent":["import i18n from 'i18n-js';\r\nimport * as Localization from 'expo-localization';\r\nimport Storage from '@react-native-async-storage/async-storage';\r\nimport React, {useCallback, useContext, useEffect, useState} from 'react';\r\n\r\nimport translations from '../constants/translations/';\r\nimport {ITranslate} from '../constants/types';\r\n\r\nexport const TranslationContext = React.createContext({});\r\n\r\nexport const TranslationProvider = ({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) => {\r\n  const [locale, setLocale] = useState('en');\r\n\r\n  // Set the locale once at the beginning of your app.\r\n  i18n.locale = locale;\r\n  // Set the key-value pairs for the different languages you want to support.\r\n  i18n.translations = translations;\r\n  // When a value is missing from a language it'll fallback to another language with the key present.\r\n  i18n.fallbacks = true;\r\n\r\n  const t = useCallback(\r\n    (scope: i18n.Scope, options?: i18n.TranslateOptions) => {\r\n      return i18n.t(scope, {...options, locale});\r\n    },\r\n    [locale],\r\n  );\r\n\r\n  // get locale from storage\r\n  const getLocale = useCallback(async () => {\r\n    // get preferance gtom storage\r\n    const localeJSON = await Storage.getItem('locale');\r\n\r\n    // set Locale / compare if has updated\r\n    setLocale(localeJSON !== null ? localeJSON : Localization.locale);\r\n  }, [setLocale]);\r\n\r\n  useEffect(() => {\r\n    getLocale();\r\n  }, [getLocale]);\r\n\r\n  useEffect(() => {\r\n    // save preferance to storage\r\n    Storage.setItem('locale', locale);\r\n  }, [locale]);\r\n\r\n  const contextValue = {\r\n    t,\r\n    locale,\r\n    setLocale,\r\n    translate: t,\r\n  };\r\n\r\n  return (\r\n    <TranslationContext.Provider value={contextValue}>\r\n      {children}\r\n    </TranslationContext.Provider>\r\n  );\r\n};\r\n\r\n/*\r\n * useTranslation hook based on i18n-js\r\n * Source: https://github.com/fnando/i18n-js\r\n */\r\nexport const useTranslation = () =>\r\n  useContext(TranslationContext) as ITranslate;\r\n"]},"metadata":{},"sourceType":"module"}