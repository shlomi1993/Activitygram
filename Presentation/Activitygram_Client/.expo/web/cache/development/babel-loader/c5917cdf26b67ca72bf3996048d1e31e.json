{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useIsDrawerOpen, createDrawerNavigator, DrawerContentScrollView } from '@react-navigation/drawer';\nimport Screens from \"./Screens\";\nimport { Block, Text, Switch, Button, Image } from \"../components\";\nimport { useData, useTheme, useTranslation } from \"../hooks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Drawer = createDrawerNavigator();\n\nvar ScreensStack = function ScreensStack() {\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var isDrawerOpen = useIsDrawerOpen();\n  var animation = useRef(new Animated.Value(0)).current;\n  var scale = animation.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 0.88]\n  });\n  var borderRadius = animation.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 16]\n  });\n  var animatedStyle = {\n    borderRadius: borderRadius,\n    transform: [{\n      scale: scale\n    }]\n  };\n  useEffect(function () {\n    Animated.timing(animation, {\n      duration: 200,\n      useNativeDriver: true,\n      toValue: isDrawerOpen ? 1 : 0\n    }).start();\n  }, [isDrawerOpen, animation]);\n  return _jsx(Animated.View, {\n    style: StyleSheet.flatten([animatedStyle, {\n      flex: 1,\n      overflow: 'hidden',\n      borderColor: colors.card,\n      borderWidth: isDrawerOpen ? 1 : 0\n    }]),\n    children: _jsx(Screens, {})\n  });\n};\n\nvar DrawerContent = function DrawerContent(props) {\n  var navigation = props.navigation;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useData = useData(),\n      isDark = _useData.isDark,\n      handleIsDark = _useData.handleIsDark;\n\n  var _useState = useState('Home'),\n      _useState2 = _slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  var _useTheme2 = useTheme(),\n      assets = _useTheme2.assets,\n      colors = _useTheme2.colors,\n      gradients = _useTheme2.gradients,\n      sizes = _useTheme2.sizes;\n\n  var labelColor = colors.text;\n  var handleNavigation = useCallback(function (to) {\n    setActive(to);\n    navigation.navigate(to);\n  }, [navigation, setActive]);\n  var handleWebLink = useCallback(function (url) {\n    return Linking.openURL(url);\n  }, []);\n  var screens = [{\n    name: t('screens.home'),\n    to: 'Home',\n    icon: assets.home\n  }, {\n    name: t('screens.components'),\n    to: 'Components',\n    icon: assets.components\n  }];\n  return _jsx(DrawerContentScrollView, _objectSpread(_objectSpread({}, props), {}, {\n    scrollEnabled: true,\n    removeClippedSubviews: true,\n    renderToHardwareTextureAndroid: true,\n    contentContainerStyle: {\n      paddingBottom: sizes.padding\n    },\n    children: _jsxs(Block, {\n      paddingHorizontal: sizes.padding,\n      children: [_jsxs(Block, {\n        flex: 0,\n        row: true,\n        align: \"center\",\n        marginBottom: sizes.l,\n        children: [_jsx(Image, {\n          radius: 0,\n          width: 33,\n          height: 33,\n          color: colors.text,\n          source: assets.background,\n          marginRight: sizes.sm\n        }), _jsxs(Block, {\n          children: [_jsx(Text, {\n            size: 12,\n            semibold: true,\n            children: t('app.name')\n          }), _jsx(Text, {\n            size: 12,\n            semibold: true,\n            children: t('app.native')\n          })]\n        })]\n      }), screens == null ? void 0 : screens.map(function (screen, index) {\n        var isActive = active === screen.to;\n        return _jsxs(Button, {\n          row: true,\n          justify: \"flex-start\",\n          marginBottom: sizes.s,\n          onPress: function onPress() {\n            return handleNavigation(screen.to);\n          },\n          children: [_jsx(Block, {\n            flex: 0,\n            radius: 6,\n            align: \"center\",\n            justify: \"center\",\n            width: sizes.md,\n            height: sizes.md,\n            marginRight: sizes.s,\n            gradient: gradients[isActive ? 'primary' : 'white'],\n            children: _jsx(Image, {\n              radius: 0,\n              width: 14,\n              height: 14,\n              source: screen.icon,\n              color: colors[isActive ? 'white' : 'black']\n            })\n          }), _jsx(Text, {\n            p: true,\n            semibold: isActive,\n            color: labelColor,\n            children: screen.name\n          })]\n        }, \"menu-screen-\" + screen.name + \"-\" + index);\n      }), _jsx(Block, {\n        flex: 0,\n        height: 1,\n        marginRight: sizes.md,\n        marginVertical: sizes.sm,\n        gradient: gradients.menu\n      }), _jsx(Text, {\n        semibold: true,\n        transform: \"uppercase\",\n        opacity: 0.5,\n        children: t('menu.documentation')\n      }), _jsxs(Button, {\n        row: true,\n        justify: \"flex-start\",\n        marginTop: sizes.sm,\n        marginBottom: sizes.s,\n        onPress: function onPress() {\n          return handleWebLink('https://github.com/creativetimofficial');\n        },\n        children: [_jsx(Block, {\n          flex: 0,\n          radius: 6,\n          align: \"center\",\n          justify: \"center\",\n          width: sizes.md,\n          height: sizes.md,\n          marginRight: sizes.s,\n          gradient: gradients.white,\n          children: _jsx(Image, {\n            radius: 0,\n            width: 14,\n            height: 14,\n            color: colors.black,\n            source: assets.documentation\n          })\n        }), _jsx(Text, {\n          p: true,\n          color: labelColor,\n          children: t('menu.started')\n        })]\n      }), _jsxs(Block, {\n        row: true,\n        justify: \"space-between\",\n        marginTop: sizes.sm,\n        children: [_jsx(Text, {\n          color: labelColor,\n          children: t('darkMode')\n        }), _jsx(Switch, {\n          checked: isDark,\n          onPress: function onPress(checked) {\n            handleIsDark(checked);\n            Alert.alert(t('pro.title'), t('pro.alert'));\n          }\n        })]\n      })]\n    })\n  }));\n};\n\nexport default (function () {\n  var _useTheme3 = useTheme(),\n      gradients = _useTheme3.gradients;\n\n  return _jsx(Block, {\n    gradient: gradients.light,\n    children: _jsx(Drawer.Navigator, {\n      drawerType: \"slide\",\n      overlayColor: \"transparent\",\n      sceneContainerStyle: {\n        backgroundColor: 'transparent'\n      },\n      drawerContent: function drawerContent(props) {\n        return _jsx(DrawerContent, _objectSpread({}, props));\n      },\n      drawerStyle: {\n        flex: 1,\n        width: '60%',\n        borderRightWidth: 0,\n        backgroundColor: 'transparent'\n      },\n      children: _jsx(Drawer.Screen, {\n        name: \"Screens\",\n        component: ScreensStack\n      })\n    })\n  });\n});","map":{"version":3,"sources":["C:/Users/shirz/Documents/GitHub/Activitygram/Presentation/Activitygram_Client/src/navigation/Menu.tsx"],"names":["React","useCallback","useEffect","useRef","useState","useIsDrawerOpen","createDrawerNavigator","DrawerContentScrollView","Screens","Block","Text","Switch","Button","Image","useData","useTheme","useTranslation","Drawer","ScreensStack","colors","isDrawerOpen","animation","Animated","Value","current","scale","interpolate","inputRange","outputRange","borderRadius","animatedStyle","transform","timing","duration","useNativeDriver","toValue","start","StyleSheet","flatten","flex","overflow","borderColor","card","borderWidth","DrawerContent","props","navigation","t","isDark","handleIsDark","active","setActive","assets","gradients","sizes","labelColor","text","handleNavigation","to","navigate","handleWebLink","url","Linking","openURL","screens","name","icon","home","components","paddingBottom","padding","l","background","sm","map","screen","index","isActive","s","md","menu","white","black","documentation","checked","Alert","alert","light","backgroundColor","width","borderRightWidth"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useRef, useState} from 'react';\r\nimport {Alert, Animated, Linking, StyleSheet} from 'react-native';\r\n\r\nimport {\r\n  useIsDrawerOpen,\r\n  createDrawerNavigator,\r\n  DrawerContentComponentProps,\r\n  DrawerContentOptions,\r\n  DrawerContentScrollView,\r\n} from '@react-navigation/drawer';\r\n\r\nimport Screens from './Screens';\r\nimport {Block, Text, Switch, Button, Image} from '../components';\r\nimport {useData, useTheme, useTranslation} from '../hooks';\r\n\r\nconst Drawer = createDrawerNavigator();\r\n\r\n/* drawer menu screens navigation */\r\nconst ScreensStack = () => {\r\n  const {colors} = useTheme();\r\n  const isDrawerOpen = useIsDrawerOpen();\r\n  const animation = useRef(new Animated.Value(0)).current;\r\n\r\n  const scale = animation.interpolate({\r\n    inputRange: [0, 1],\r\n    outputRange: [1, 0.88],\r\n  });\r\n\r\n  const borderRadius = animation.interpolate({\r\n    inputRange: [0, 1],\r\n    outputRange: [0, 16],\r\n  });\r\n\r\n  const animatedStyle = {\r\n    borderRadius: borderRadius,\r\n    transform: [{scale: scale}],\r\n  };\r\n\r\n  useEffect(() => {\r\n    Animated.timing(animation, {\r\n      duration: 200,\r\n      useNativeDriver: true,\r\n      toValue: isDrawerOpen ? 1 : 0,\r\n    }).start();\r\n  }, [isDrawerOpen, animation]);\r\n\r\n  return (\r\n    <Animated.View\r\n      style={StyleSheet.flatten([\r\n        animatedStyle,\r\n        {\r\n          flex: 1,\r\n          overflow: 'hidden',\r\n          borderColor: colors.card,\r\n          borderWidth: isDrawerOpen ? 1 : 0,\r\n        },\r\n      ])}>\r\n      {/*  */}\r\n      <Screens />\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\n/* custom drawer menu */\r\nconst DrawerContent = (\r\n  props: DrawerContentComponentProps<DrawerContentOptions>,\r\n) => {\r\n  const {navigation} = props;\r\n  const {t} = useTranslation();\r\n  const {isDark, handleIsDark} = useData();\r\n  const [active, setActive] = useState('Home');\r\n  const {assets, colors, gradients, sizes} = useTheme();\r\n  const labelColor = colors.text;\r\n\r\n  const handleNavigation = useCallback(\r\n    (to) => {\r\n      setActive(to);\r\n      navigation.navigate(to);\r\n    },\r\n    [navigation, setActive],\r\n  );\r\n\r\n  const handleWebLink = useCallback((url) => Linking.openURL(url), []);\r\n\r\n  // screen list for Drawer menu\r\n  const screens = [\r\n    {name: t('screens.home'), to: 'Home', icon: assets.home},\r\n    {name: t('screens.components'), to: 'Components', icon: assets.components},\r\n  ];\r\n\r\n  return (\r\n    <DrawerContentScrollView\r\n      {...props}\r\n      scrollEnabled\r\n      removeClippedSubviews\r\n      renderToHardwareTextureAndroid\r\n      contentContainerStyle={{paddingBottom: sizes.padding}}>\r\n      <Block paddingHorizontal={sizes.padding}>\r\n        <Block flex={0} row align=\"center\" marginBottom={sizes.l}>\r\n          <Image\r\n            radius={0}\r\n            width={33}\r\n            height={33}\r\n            color={colors.text}\r\n            source={assets.background}\r\n            marginRight={sizes.sm}\r\n          />\r\n          <Block>\r\n            <Text size={12} semibold>\r\n              {t('app.name')}\r\n            </Text>\r\n            <Text size={12} semibold>\r\n              {t('app.native')}\r\n            </Text>\r\n          </Block>\r\n        </Block>\r\n\r\n        {screens?.map((screen, index) => {\r\n          const isActive = active === screen.to;\r\n          return (\r\n            <Button\r\n              row\r\n              justify=\"flex-start\"\r\n              marginBottom={sizes.s}\r\n              key={`menu-screen-${screen.name}-${index}`}\r\n              onPress={() => handleNavigation(screen.to)}>\r\n              <Block\r\n                flex={0}\r\n                radius={6}\r\n                align=\"center\"\r\n                justify=\"center\"\r\n                width={sizes.md}\r\n                height={sizes.md}\r\n                marginRight={sizes.s}\r\n                gradient={gradients[isActive ? 'primary' : 'white']}>\r\n                <Image\r\n                  radius={0}\r\n                  width={14}\r\n                  height={14}\r\n                  source={screen.icon}\r\n                  color={colors[isActive ? 'white' : 'black']}\r\n                />\r\n              </Block>\r\n              <Text p semibold={isActive} color={labelColor}>\r\n                {screen.name}\r\n              </Text>\r\n            </Button>\r\n          );\r\n        })}\r\n\r\n        <Block\r\n          flex={0}\r\n          height={1}\r\n          marginRight={sizes.md}\r\n          marginVertical={sizes.sm}\r\n          gradient={gradients.menu}\r\n        />\r\n\r\n        <Text semibold transform=\"uppercase\" opacity={0.5}>\r\n          {t('menu.documentation')}\r\n        </Text>\r\n\r\n        <Button\r\n          row\r\n          justify=\"flex-start\"\r\n          marginTop={sizes.sm}\r\n          marginBottom={sizes.s}\r\n          onPress={() =>\r\n            handleWebLink('https://github.com/creativetimofficial')\r\n          }>\r\n          <Block\r\n            flex={0}\r\n            radius={6}\r\n            align=\"center\"\r\n            justify=\"center\"\r\n            width={sizes.md}\r\n            height={sizes.md}\r\n            marginRight={sizes.s}\r\n            gradient={gradients.white}>\r\n            <Image\r\n              radius={0}\r\n              width={14}\r\n              height={14}\r\n              color={colors.black}\r\n              source={assets.documentation}\r\n            />\r\n          </Block>\r\n          <Text p color={labelColor}>\r\n            {t('menu.started')}\r\n          </Text>\r\n        </Button>\r\n\r\n        <Block row justify=\"space-between\" marginTop={sizes.sm}>\r\n          <Text color={labelColor}>{t('darkMode')}</Text>\r\n          <Switch\r\n            checked={isDark}\r\n            onPress={(checked) => {\r\n              handleIsDark(checked);\r\n              Alert.alert(t('pro.title'), t('pro.alert'));\r\n            }}\r\n          />\r\n        </Block>\r\n      </Block>\r\n    </DrawerContentScrollView>\r\n  );\r\n};\r\n\r\n/* drawer menu navigation */\r\nexport default () => {\r\n  const {gradients} = useTheme();\r\n\r\n  return (\r\n    <Block gradient={gradients.light}>\r\n      <Drawer.Navigator\r\n        drawerType=\"slide\"\r\n        overlayColor=\"transparent\"\r\n        sceneContainerStyle={{backgroundColor: 'transparent'}}\r\n        drawerContent={(props) => <DrawerContent {...props} />}\r\n        drawerStyle={{\r\n          flex: 1,\r\n          width: '60%',\r\n          borderRightWidth: 0,\r\n          backgroundColor: 'transparent',\r\n        }}>\r\n        <Drawer.Screen name=\"Screens\" component={ScreensStack} />\r\n      </Drawer.Navigator>\r\n    </Block>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}